version: 2

models:
  - name: int_ar_transaction_history
    description: >
      Chronological transaction history model that provides a detailed timeline
      of all AR-related activities. This model builds on shared calculations
      to create a comprehensive transaction record with proper categorization
      and balance impact tracking.
      
      Key features:
      - Creates a chronological sequence of all AR transactions
      - Categorizes transactions by type (procedure, payment, adjustment)
      - Tracks balance impact (increase/decrease)
      - Identifies insurance vs patient transactions
      - Maintains detailed payment and adjustment information
      - Supports incremental loading with 7-day lookback
      - Excludes zero-amount transactions
      
      Data Sources:
      - int_ar_shared_calculations: Base transaction data with aging and categorization
      
      Business rules:
      - Transactions are ordered chronologically by date, patient, and procedure
      - Each transaction has a unique identifier
      - Balance impact is determined by transaction amount
      - Transaction type is determined by payment/adjustment presence
      - Insurance transactions are clearly identified
      - Zero-amount transactions are excluded
      - Incremental loading uses 7-day lookback window
      
    config:
      materialized: incremental
      unique_key: ar_transaction_id
      schema: intermediate
    
    columns:
      - name: ar_transaction_id
        description: >
          Primary key - Unique identifier for the transaction record. This is a
          surrogate key generated using ROW_NUMBER() over transaction date, patient,
          and procedure.
        tests:
          - unique
          - not_null

      - name: procedure_id
        description: >
          Foreign key to procedure. Note: procedure_id = 0 represents financial
          transactions rather than actual procedures.
        tests:
          - dbt_utils.expression_is_true:
              expression: ">= 0"  # Simplified expression since it's already applied to procedure_id
              config:
                severity: error
                description: "procedure_id must be non-negative"
          - relationships:
              to: ref('int_procedure_complete')
              field: procedure_id
              where: "procedure_id > 0"  # Only validate relationships for actual procedures
              config:
                severity: warn  # Change to warning since financial transactions are valid

      - name: patient_id
        description: Unique identifier for the patient
        tests:
          - not_null
          - relationships:
              to: ref('int_patient_profile')
              field: patient_id
              config:
                severity: error

      - name: transaction_date
        description: Date of the transaction
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::date"
              max_value: "CURRENT_DATE"

      - name: amount
        description: Transaction amount (positive for procedures, negative for payments)
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -100000
              max_value: 100000
          - dbt_expectations.expect_column_values_to_not_be_in_set:
              value_set: [0]
              quote_values: false
              config:
                severity: error
                description: "Zero-amount transactions should be excluded"

      - name: transaction_type
        description: Type of transaction (PROCEDURE, INSURANCE_PAYMENT, PATIENT_PAYMENT, ADJUSTMENT)
        tests:
          - not_null
          - accepted_values:
              values: ['PROCEDURE', 'INSURANCE_PAYMENT', 'PATIENT_PAYMENT', 'ADJUSTMENT']

      - name: balance_impact
        description: Impact on AR balance (INCREASE or DECREASE)
        tests:
          - not_null
          - accepted_values:
              values: ['INCREASE', 'DECREASE']

      - name: transaction_category
        description: >
          Detailed category of the transaction:
          - PROCEDURE_FEE: For procedure charges
          - CASH: Cash payments
          - CHECK: Check payments
          - CREDIT_CARD: Credit card payments
          - ELECTRONIC: Electronic payments
          - STANDARD: Standard/regular payments
          - ADMINISTRATIVE: Administrative payments
          - REFUND: Refund payments
          - INSURANCE: Insurance payments
          - WRITEOFF: Insurance or provider write-offs
          - DISCOUNT: Any type of discount
          - CREDIT: Credits applied to the account
          - ADMIN_CORRECTION: Administrative corrections
          - ADMIN_ADJUSTMENT: Administrative adjustments
          - REALLOCATION: Reallocation adjustments
          - UNEARNED_INCOME: Unearned income adjustments
          - OTHER: Any other transaction types
        tests:
          - not_null
          - accepted_values:
              values: [
                'PROCEDURE_FEE', 'CASH', 'CHECK', 'CREDIT_CARD',
                'ELECTRONIC', 'STANDARD', 'ADMINISTRATIVE', 'REFUND',
                'INSURANCE', 'WRITEOFF', 'DISCOUNT', 'CREDIT',
                'ADMIN_CORRECTION', 'ADMIN_ADJUSTMENT', 'REALLOCATION',
                'UNEARNED_INCOME', 'OTHER'
              ]

      - name: insurance_transaction_flag
        description: Flag indicating if transaction is insurance-related
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: payment_source_type
        description: >
          Payment source type field from source system. Currently unused by the clinic.
          Values observed: 0 or null.
        tests:
          - accepted_values:
              values: [0, null]

      - name: payment_method
        description: >
          Method of payment:
          - CHECK: Check payments (including insurance checks)
          - CREDIT_CARD: Credit card payments (including insurance credit)
          - ELECTRONIC: Electronic payments (including insurance electronic)
          - CASH: Cash payments
          - STANDARD: Standard/regular payments
          - ADMINISTRATIVE: Administrative payments
          - REFUND: Refund payments
          - OTHER: Any other payment types
        tests:
          - accepted_values:
              values: [
                'CHECK', 'CREDIT_CARD', 'ELECTRONIC', 'CASH',
                'STANDARD', 'ADMINISTRATIVE', 'REFUND', 'OTHER',
                null
              ]

      - name: adjustment_type
        description: >
          Type of adjustment (WRITEOFF, DISCOUNT, CREDIT, ADMIN_CORRECTION, 
          ADMIN_ADJUSTMENT, REALLOCATION, UNEARNED_INCOME, OTHER)
        tests:
          - accepted_values:
              values: [
                'WRITEOFF', 'DISCOUNT', 'CREDIT', 'ADMIN_CORRECTION',
                'ADMIN_ADJUSTMENT', 'REALLOCATION', 'UNEARNED_INCOME',
                'OTHER', null
              ]

      - name: days_outstanding
        description: Number of days the transaction has been outstanding
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1000

      - name: aging_bucket
        description: Aging category (0-30, 31-60, 61-90, 90+ days)
        tests:
          - not_null
          - accepted_values:
              values: ['0-30', '31-60', '61-90', '90+']

      - name: _loaded_at
        description: >
          Timestamp when the transaction record was loaded from the source system.
          This field is preserved from the primary source for business lineage.
        tests:
          - not_null

      - name: _created_at
        description: >
          Timestamp when the transaction record was created in the source system.
          This field is preserved from the primary source for business lineage.
        tests:
          - not_null

      - name: _updated_at
        description: >
          Timestamp when the transaction record was last updated in the source system.
          This field is preserved from the primary source for business lineage.
        tests:
          - not_null

      - name: _created_by
        description: >
          Identifier for who created the transaction record in the source system.
          This field is preserved from the primary source for business lineage.
        tests:
          - not_null

      - name: _transformed_at
        description: >
          Timestamp when this intermediate model was built by dbt.
          This field is generated by the standardize_intermediate_metadata macro.
        tests:
          - not_null

    tests:
      # Balance impact validation
      - dbt_utils.expression_is_true:
          expression: >
            (balance_impact = 'INCREASE' AND amount > 0) OR
            (balance_impact = 'DECREASE' AND amount < 0)
          config:
            severity: error
            description: "Balance impact must match transaction amount sign"

      # Insurance transaction validation
      - dbt_utils.expression_is_true:
          expression: >
            (insurance_transaction_flag = true AND transaction_type = 'INSURANCE_PAYMENT') OR
            (insurance_transaction_flag = false AND transaction_type != 'INSURANCE_PAYMENT')
          config:
            severity: error
            description: "Insurance transaction flag must match transaction type"

      # Aging validation
      - dbt_utils.expression_is_true:
          expression: >
            (aging_bucket = '0-30' AND days_outstanding <= 30) OR
            (aging_bucket = '31-60' AND days_outstanding > 30 AND days_outstanding <= 60) OR
            (aging_bucket = '61-90' AND days_outstanding > 60 AND days_outstanding <= 90) OR
            (aging_bucket = '90+' AND days_outstanding > 90)
          config:
            severity: error
            description: "Aging bucket must match days outstanding"

      # Source tracking validation
      - dbt_utils.expression_is_true:
          expression: "_created_at <= _updated_at"
          config:
            severity: error
            description: "Creation time must be before or equal to update time"

      # "OTHER" adjustment type analysis
      - dbt_utils.expression_is_true:
          expression: >
            CASE
              WHEN adjustment_type = 'OTHER' THEN
                CASE
                  WHEN transaction_category = 'WRITEOFF' THEN 'WRITEOFF'
                  WHEN transaction_category = 'DISCOUNT' THEN 'DISCOUNT'
                  WHEN transaction_category = 'CREDIT' THEN 'CREDIT'
                  ELSE 'OTHER'
                END
              ELSE adjustment_type
            END = adjustment_type
          config:
            severity: warn
            description: >
              Found adjustments categorized as 'OTHER'. These should be reviewed and
              recategorized based on their transaction_category. Please update the
              adjustment_type mapping in int_ar_shared_calculations.sql to properly
              categorize these adjustments.

    meta:
      business_owners: ["dental_finance_team", "insurance_team"]
      technical_owners: ["data_engineering_team"]
      refresh_frequency: "daily"
      contains_pii: true
      data_quality_requirements:
        - "Transactions must be properly categorized by type and impact"
        - "Balance impact must correctly reflect transaction amount"
        - "Insurance transactions must be properly identified"
        - "Aging buckets must correctly reflect days outstanding"
        - "Transaction dates must be in chronological order"
        - "Payment and adjustment details must match transaction type"
        - "All transactions must have a unique identifier"
        - "Transaction amounts must be properly signed (positive for procedures, negative for payments)"
        - "Zero-amount transactions must be excluded"
        - "Incremental loading must maintain data consistency" 