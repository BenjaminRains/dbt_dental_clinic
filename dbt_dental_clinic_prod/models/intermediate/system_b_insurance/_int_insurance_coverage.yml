version: 2

models:
  - name: int_insurance_coverage
    description: |
      Intermediate model for insurance coverage information. Combines data from insurance plans,
      patient plans, verifications, and benefits to provide a comprehensive view of insurance coverage.
      
      Business rules:
      - Only includes non-pending patient plans
      - Uses template benefits (patient_plan_id = 0) from the benefits table
      - Considers insurance active if verified and not pending
      - Uses the most recent timestamps from all source tables for created_at and updated_at
      - Handles incomplete records with specific placeholder values
      
      Data Quality Note:
      Some insurance plan records have missing carrier or subscriber information.
      These records are preserved in the model with specific handling:

      Missing Carrier Information:
      - carrier_id set to -1
      - carrier_name set to empty string
      - is_incomplete_record flag set to true
      
      Missing Subscriber Information:
      - subscriber_id set to -1 when either:
        a) the record is incomplete (carrier_id is null), or
        b) the referenced subscriber doesn't exist in the subscriber table
      - is_incomplete_record flag set to true in both cases
      
      This approach allows downstream models to:
      - Identify and handle incomplete records appropriately
      - Maintain referential integrity for complete records
      - Preserve all insurance plan data while clearly marking its completeness status
      
      Data Sources:
      - stg_opendental__insplan: Base insurance plan information
      - stg_opendental__carrier: Carrier details
      - stg_opendental__inssub: Subscriber information
      - stg_opendental__patplan: Patient plan associations
      - stg_opendental__insverify: Verification status
      - stg_opendental__benefit: Template benefit information
    
    config:
      materialized: table
      schema: intermediate
      unique_key: insurance_plan_id
    
    columns:
      - name: insurance_plan_id
        description: |
          Primary key for the insurance plan.
          Business rules:
          - Derived from patplan_id in the final output
          - Must be unique across all insurance plans
        tests:
          - unique
          - not_null

      - name: patient_id
        description: |
          Foreign key to the patient.
          Business rules:
          - Must reference a valid patient record
          - Cannot be null as all insurance plans must be associated with a patient
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: ordinal
        description: |
          Order of the insurance plan for the patient.
          Business rules:
          - 1 indicates primary insurance
          - 2 indicates secondary insurance
          - Higher numbers indicate additional insurance plans
          - Cannot be null as all insurance plans must have an order
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              column_name: ordinal
              min_value: 1
              max_value: 10
              severity: warn

      - name: carrier_id
        description: |
          Foreign key to the insurance carrier.
          Business rules:
          - Must reference a valid carrier record
          - Cannot be null as all insurance plans must have a carrier
          - Incomplete records will have carrier_id = -1
        tests:
          - relationships:
              to: ref('stg_opendental__carrier')
              field: carrier_id
              where: "carrier_id != -1"

      - name: subscriber_id
        description: |
          Foreign key to the insurance subscriber.
          Business rules:
          - Must reference a valid subscriber record
          - Cannot be null as all insurance plans must have a subscriber
          - Incomplete records will have subscriber_id = -1
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__inssub')
              field: inssub_id
              where: "subscriber_id != -1"

      - name: plan_type
        description: |
          Type of insurance plan.
          Business rules:
          - Cannot be null
          - Should match the plan type from the insurance plan record
          - Empty string for incomplete records
        tests:
          - not_null

      - name: group_number
        description: |
          Insurance group number.
          Business rules:
          - Cannot be null
          - May be shared across multiple carriers
          - Empty string for incomplete records
        tests:
          - not_null

      - name: group_name
        description: |
          Name of the insurance group.
          Business rules:
          - Cannot be null
          - May vary slightly for same group across carriers
          - Empty string for incomplete records
        tests:
          - not_null

      - name: carrier_name
        description: |
          Name of the insurance carrier.
          Business rules:
          - Must match the carrier record
          - Empty string for incomplete records
        tests:
          - dbt_expectations.expect_column_values_to_not_be_null:
              column_name: carrier_name
              where: "carrier_id != -1"

      - name: verification_date
        description: |
          Date when the insurance was last verified.
          Business rules:
          - Should be within a reasonable date range (2020-01-01 to 2030-12-31)
          - Null values indicate unverified insurance
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              column_name: verification_date
              min_value: "'2020-01-01'::date"
              max_value: "'2030-12-31'::date"
              severity: warn

      - name: benefit_details
        description: |
          JSON containing template benefit information.
          Business rules:
          - Aggregated from stg_opendental__benefit where patient_plan_id = 0
          - Contains benefit_id, coverage_category_id, procedure_code_id, code_group_id,
            benefit_type, coverage_percent, monetary_amount, time_period, quantity_qualifier,
            quantity, coverage_level, and treatment_area
        tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_name: benefit_details
              column_type: json

      - name: is_active
        description: |
          Flag indicating if the insurance coverage is currently active.
          Business rules:
          - True if verified and not pending
          - False if pending or unverified
          - Cannot be null
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_incomplete_record
        description: |
          Flag indicating if the record is incomplete.
          Business rules:
          - True if carrier_id is null or subscriber_id is null
          - False for complete records
          - Cannot be null
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: effective_date
        description: |
          Date when the insurance coverage became effective.
          Business rules:
          - Cannot be null
          - Should be within a reasonable date range (2020-01-01 to 2030-12-31)
          - Uses patient_plan_created_at if available, otherwise patient_plan_updated_at
          - Defaults to '2020-01-01' if no valid date is found
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              column_name: effective_date
              min_value: "'2020-01-01'::date"
              max_value: "'2030-12-31'::date"
              severity: warn

      - name: termination_date
        description: |
          Date when the insurance coverage was terminated (if applicable).
          Business rules:
          - Null for active insurance
          - Should be within a reasonable date range (2020-01-01 to 2030-12-31) if not null
          - Set to patient_plan_updated_at when is_pending = 1
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              column_name: termination_date
              min_value: "'2020-01-01'::date"
              max_value: "'2030-12-31'::date"
              severity: warn

      - name: _loaded_at
        description: >
          ETL pipeline extraction timestamp - when the record was loaded from the source system
          
          Source: ETL pipeline metadata (preserved from staging models)
          Purpose: Data lineage tracking and pipeline monitoring
          Usage: ETL debugging and data freshness validation
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2020-01-01 00:00:00'::timestamp"
              max_value: "current_timestamp"
              config:
                description: "Extraction timestamps must be within reasonable data processing window"
      
      - name: _created_by
        description: >
          User who created the record in the source system (OpenDental)
          
          Source: Preserved from staging models (stg_opendental__insplan)
          Business Context: User identifier for audit trail and accountability
          Usage: Security auditing and user activity tracking
        tests:
          - dbt_utils.expression_is_true:
              expression: "_created_by IS NOT NULL OR _created_by = 0"
              config:
                severity: warn
                description: "User identification should be available for audit purposes"
      
      - name: _created_at
        description: >
          Original creation timestamp from OpenDental source system
          
          Source: Preserved from staging models (stg_opendental__insplan)
          Business Context: When the insurance plan was originally created in OpenDental
          Usage: Business timeline analysis and plan lifecycle tracking
        tests:
          - not_null:
              config:
                description: "Metadata requirement: Creation timestamp mandatory for audit trail"
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2020-01-01 00:00:00'::timestamp"
              max_value: "'2030-12-31 23:59:59'::timestamp"
              config:
                description: "Data quality validation: Creation dates must be within valid business operating range"
      
      - name: _updated_at
        description: >
          Last update timestamp from OpenDental source system
          
          Source: Preserved from staging models (stg_opendental__insplan)
          Business Context: When the insurance plan was last updated in OpenDental
          Purpose: Change tracking and incremental loading support
        tests:
          - not_null:
              config:
                description: "Metadata requirement: Update timestamp mandatory for change tracking"
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2020-01-01 00:00:00'::timestamp"
              max_value: "'2030-12-31 23:59:59'::timestamp"
              config:
                description: "Data quality validation: Update dates must be within valid business operating range"
      
      - name: _transformed_at
        description: >
          dbt intermediate model processing timestamp - when this model was last built
          
          Source: current_timestamp at dbt model execution
          Purpose: Intermediate model execution tracking and debugging
          Usage: Understanding data processing timeline and model refresh monitoring
        tests:
          - not_null:
              config:
                description: "Technical requirement for data lineage and model execution monitoring"

    tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: [insurance_plan_id, patient_id]
          severity: warn

      - dbt_utils.expression_is_true:
          expression: "not (is_active = true and verification_date is null)"
          severity: warn
          name: warn_active_without_verification

      - dbt_utils.expression_is_true:
          expression: "not (is_incomplete_record = true and carrier_id != -1)"
          severity: warn
          name: warn_inconsistent_incomplete_flag

      - dbt_utils.expression_is_true:
          expression: "not (is_incomplete_record = true and subscriber_id != -1)"
          severity: warn
          name: warn_inconsistent_incomplete_flag_subscriber

      - dbt_utils.expression_is_true:
          expression: "not (termination_date is not null and is_active = true)"
          severity: warn
          name: warn_terminated_but_active 