version: 2

models:
  - name: stg_opendental__fee
    description: >
      Staging model for OpenDental fee data. Contains standardized fee information including 
      procedure costs, fee schedules, and provider-specific fees for dental procedures.
      Each record represents a fee amount for a specific procedure, fee schedule, and provider combination.
    
    meta:
      # Data scope and context
      record_count: "~219,000"
      data_scope: "2023-01-01 to current date"
      
      known_issues:
        - description: "Fee ID 217113: Decimal point error where $116.11 was entered as $11,611.00 for procedure code D0180"
          severity: "warn"
          identified_date: "2024-01-15"
          test: "suspicious_fee_amounts"
        - description: "Fee ID 219409: Decimal point error where $255.00 was entered as $25,500.00 for AOX procedure (fee schedule 8293)"
          severity: "warn"  
          identified_date: "2024-01-15"
          test: "suspicious_fee_amounts"
        - description: "Fee ID 218252: Decimal point error where $255.00 was entered as $25,500.00 for AOX procedure (fee schedule 8292)"
          severity: "warn"
          identified_date: "2024-01-15" 
          test: "suspicious_fee_amounts"
        - description: "Fee Schedule 8285 (Cleveland Cliffs): Single fee ($56.43) for D0120 only - appears inactive"
          severity: "warn"
          identified_date: "2024-01-15"
          test: "fee_schedule_usage_check"
        - description: "Fee Schedule 8290 (IMAGE FIRST): Single fee ($11,611.00) for D0180 only, contains known decimal error"
          severity: "warn"
          identified_date: "2024-01-15"
          test: "fee_schedule_usage_check"
        - description: "Zero-fee entries found in surgical procedures (D7261, D7270, D7272)"
          severity: "warn"
          identified_date: "2024-01-15"
          test: "fee_default_zero_check"
        - description: "Some fee schedules referenced in fees may not exist in feesched table (historical/inactive schedules)"
          severity: "warn"
          identified_date: "2024-01-15"
          test: "fee_schedule_relationship"
      
      business_rules:
        - rule: "Each combination of fee_schedule_id, procedure_code_id, and provider_id should be unique"
          impact: "Duplicate combinations could cause billing inconsistencies"
        - rule: "Fee amounts should generally be positive values, with zero fees only for specific promotional or write-off procedures"
          impact: "Negative or inappropriate zero fees affect revenue calculations"
        - rule: "Provider-specific fees override general fee schedule amounts when both exist"
          impact: "Provider fee precedence affects billing accuracy"
        - rule: "Default fees (is_default_fee=true) are used when no specific fee is found"
          impact: "Default fee logic affects billing when specific fees are missing"
      
      usage_notes: >
        Key Usage Considerations:
        - Filter out fee schedules 8285 and 8290 for most analysis (inactive/erroneous)
        - Be aware of decimal point errors in historical data (100x multiplication pattern)
        - Zero fees may be legitimate for promotional procedures but should be validated
        - Fee schedule relationships may have warnings due to historical/inactive schedules
        - Provider-specific fees (provider_id > 0) override general fee schedule amounts
        - Use fee_amount validation tests to identify outliers requiring investigation

    columns:
      # Primary Key
      - name: fee_id
        description: "Primary key of the fee table (maps to FeeNum in OpenDental source)"
        tests:
          - unique
          - not_null
          - dbt_utils.accepted_range:
              min_value: 1

      # Foreign Keys  
      - name: fee_schedule_id
        description: >
          Foreign key to fee schedule table (maps to FeeSched in OpenDental source). 
          Defines which fee schedule this fee belongs to. Some historical or inactive 
          fee schedules may not exist in current fee schedule data.
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 1
          - relationships:
              name: fee_schedule_relationship
              to: ref('stg_opendental__feesched')
              field: fee_schedule_id
              severity: warn  # Warn due to historical fee schedules

      - name: procedure_code_id
        description: >
          Foreign key to procedure code table (maps to CodeNum in OpenDental source). 
          Links this fee to a specific dental procedure. Some procedure codes may be 
          deprecated or not yet added to the procedure code table.
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 1
          - relationships:
              name: procedure_code_relationship
              to: ref('stg_opendental__procedurecode')
              field: procedure_code_id
              severity: warn  # Warn due to potential deprecated codes

      - name: clinic_id
        description: >
          Foreign key to clinic table (maps to ClinicNum in OpenDental source).
          Identifies which clinic this fee applies to. 
          
          NOTE: MDC does not use multi-clinic functionality, so this column is not 
          relevant for business analysis. Values are typically null or 0 for general fees.
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              where: "clinic_id is not null"
              severity: warn  # Not critical for MDC's single-clinic setup

      - name: provider_id
        description: >
          Foreign key to provider table (maps to ProvNum in OpenDental source).
          Identifies which provider this fee applies to. Value of 0 typically indicates
          a general fee not specific to any provider. May be null for general fees.
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              where: "provider_id is not null"

      # Business Data Columns
      - name: fee_amount
        description: >
          The amount charged for the procedure (maps to Amount in OpenDental source).
          Stored as double precision. Known data quality issues include decimal point
          errors where amounts were entered as 100x the intended value.
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
          - suspicious_fee_amounts:
              severity: warn

      - name: ada_code
        description: >
          ADA procedure code (maps to OldCode in OpenDental source). This is the 
          standard American Dental Association procedure code string representation.
          May be null for non-standard or custom procedures.
        tests:
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 15

      # Boolean Configuration Columns
      - name: is_default_fee
        description: >
          Flag indicating if this is a default fee (maps to UseDefaultFee in OpenDental source).
          Converted from 0/1 to boolean. When true, this fee serves as the default when 
          no more specific fee is found.
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_default_coverage
        description: >
          Flag indicating if this uses default coverage (maps to UseDefaultCov in OpenDental source).
          Converted from 0/1 to boolean. Affects insurance coverage calculations.
        tests:
          - not_null  
          - accepted_values:
              values: [true, false]

      # Date Columns
      - name: date_created
        description: >
          Date when the fee record was created (maps to SecDateEntry in OpenDental source).
          Cleaned to handle invalid OpenDental date values like '0001-01-01'.
        tests:
          - not_null

      - name: date_updated
        description: >
          Date when the fee record was last updated (maps to SecDateTEdit in OpenDental source).
          Cleaned to handle invalid OpenDental date values. Falls back to date_created if null.
        tests:
          - not_null

      # Required Metadata Columns (standardized across all models)
      - name: _loaded_at
        description: "Timestamp when the data was loaded into the data warehouse by the ETL pipeline (using current_timestamp)"
        tests:
          - not_null

      - name: _created_at
        description: >
          Timestamp when the fee record was created in the source system (OpenDental).
          Maps to SecDateEntry with fallback logic for invalid dates. May fall back to
          SecDateTEdit if creation date is invalid.
        tests:
          - not_null

      - name: _updated_at
        description: >
          Timestamp when the fee record was last updated in the source system (OpenDental).
          Maps to SecDateTEdit with fallback to SecDateEntry. Handles invalid OpenDental dates.
        tests:
          - not_null

      - name: _created_by_user_id
        description: >
          User who created the fee record in the source system (OpenDental).
          Maps to SecUserNumEntry. May be null for system-generated or historical records.
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              severity: warn
              where: "_created_by_user_id is not null"

    tests:
      # Unique combination test for business logic
      - dbt_utils.unique_combination_of_columns:
          name: fee_unique_combination
          combination_of_columns:
            - fee_schedule_id
            - procedure_code_id
            - provider_id

      # Date validation tests (moved to model level)
      - dbt_utils.expression_is_true:
          name: fee_date_created_valid_range
          expression: "date_created >= '2000-01-01'::date AND date_created <= current_date"
          severity: warn

      - dbt_utils.expression_is_true:
          name: fee_date_updated_valid_range
          expression: "date_updated >= '2000-01-01'::date AND date_updated <= current_date"
          severity: warn

      - dbt_utils.expression_is_true:
          name: fee_date_consistency_check
          expression: "date_updated >= date_created"
          severity: warn

      # Custom business rule tests - allowing more zero fee scenarios
      - dbt_utils.expression_is_true:
          name: fee_amount_business_logic
          expression: "(fee_amount >= 0)"
          severity: warn

      # Data quality tests with exclusions
      - dbt_utils.expression_is_true:
          name: fee_exclude_problematic_schedules
          expression: "fee_schedule_id NOT IN (8285, 8290) OR (fee_schedule_id = 8285 AND ada_code = 'D0120') OR (fee_schedule_id = 8290 AND ada_code = 'D0180')"
          severity: warn

      # Row count validation - adjusted for actual data volume
      - dbt_utils.expression_is_true:
          name: fee_has_minimum_records
          expression: "(select count(*) from {{ ref('stg_opendental__fee') }}) > 1000"
          severity: warn