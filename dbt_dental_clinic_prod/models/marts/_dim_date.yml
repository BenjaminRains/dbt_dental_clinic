version: 2

models:
  - name: dim_date
    description: >
      Date dimension table providing comprehensive time intelligence and calendar attributes.
      This model serves as the foundation for all time-based analysis in the dental practice,
      supporting both operational and financial reporting needs.
      
      ## Business Context
      The date dimension is a critical component of our dimensional model, enabling:
      - Time-based analysis across all business processes
      - Fiscal period alignment for financial reporting
      - Business day calculations for operational metrics
      - Holiday-adjusted performance analysis
      - Rolling period comparisons
      - Historical tracking and trend analysis
      - Cross-system integration and data consistency
      
      ## Technical Specifications
      - Grain: One row per calendar day (one row per date_id)
      - Source: Self-contained date generation using PostgreSQL generate_series
      - Date Range: 2020-01-01 through 2030-12-31 (11 years)
      - Refresh: Daily (static data, no incremental processing needed)
      - Dependencies: None (self-contained date generation)
      
      ## Business Logic
      ### Calendar Attributes
      - Standard calendar year, quarter, month, and day attributes
      - Day of week (0-6, where 0 is Sunday, 6 is Saturday)
      - Month and day names for reporting and visualization
      
      ### Fiscal Periods
      - Fiscal year starts in October (Q1: Oct-Dec)
      - Fiscal quarters aligned with business planning cycles
      - Fiscal year calculation: Current year + 1 if month >= 10
      
      ### Business Days
      - Weekdays (Monday-Friday) excluding holidays
      - Sequential business day numbering within each month
      - Holiday calendar includes major US federal holidays
      - Business day flags for operational metrics
      
      ### Time Intelligence
      - Rolling 12-month window for trend analysis
      - Prior year period comparison support
      - Holiday-adjusted performance indicators
      - Weekend vs. weekday differentiation
      
      ## Data Quality Notes
      - Date range: 2020-01-01 through 2030-12-31 (11 years)
      - Holiday calendar includes major US federal holidays
      - Business day logic excludes weekends and holidays
      - Rolling period flags are calculated relative to current_date
      
      ## Performance Considerations
      - Pre-calculated flags minimize runtime calculations
      - Indexed on date_id for optimal join performance
      - Static nature allows for materialized table optimization
      - Optimized for date range filtering and fact table joins
      
      ## Usage Notes
      - Use date_id for joins to fact tables for optimal performance
      - Leverage pre-calculated flags for filtering instead of runtime calculations
      - Utilize business day calculations for operational metrics
      - Apply holiday adjustments for accurate comparisons
      - Rolling period flags automatically update based on current_date

    columns:
      - name: date_id
        description: >
          Primary key for the date dimension, in YYYY-MM-DD format.
          Used as the standard join key for all fact tables and time-based analysis.
          
          Business Rules:
          - Must be unique across all dates
          - Format must be YYYY-MM-DD for consistency
          - Used as primary join key for all fact tables
        tests:
          - unique
          - not_null
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              min_value: 10
              max_value: 10
              config:
                severity: error
                description: "Date ID must be exactly 10 characters in YYYY-MM-DD format"

      - name: date_day
        description: >
          The actual date value, in YYYY-MM-DD format.
          Used for direct date comparisons and date arithmetic operations.
        tests:
          - not_null

      - name: year
        description: >
          Calendar year (e.g., 2024).
          Used for year-over-year analysis and annual reporting.
        tests:
          - not_null

      - name: month
        description: >
          Calendar month number (1-12).
          Used for monthly analysis and seasonal patterns.
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

      - name: day
        description: >
          Day of month (1-31).
          Used for daily analysis and month-to-date calculations.
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]

      - name: day_of_week
        description: >
          Day of week (0-6, where 0 is Sunday, 6 is Saturday).
          Used for weekly patterns and weekend vs. weekday analysis.
        tests:
          - not_null
          - accepted_values:
              values: [0, 1, 2, 3, 4, 5, 6]

      - name: month_name
        description: >
          Full month name (e.g., 'January', 'February').
          Used for reporting and visualization labels.
        tests:
          - not_null

      - name: day_name
        description: >
          Full day name (e.g., 'Monday', 'Tuesday').
          Used for reporting and visualization labels.
        tests:
          - not_null

      - name: quarter
        description: >
          Calendar quarter (1-4).
          Used for quarterly analysis and reporting.
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4]

      - name: is_weekend
        description: >
          Flag indicating if the date falls on a weekend (Saturday or Sunday).
          
          Logic:
          - true when: day_of_week is 0 (Sunday) or 6 (Saturday)
          - false when: day_of_week is 1-5 (Monday through Friday)
          
          Business Impact:
          - Used to filter out weekend days from operational metrics
          - Critical for business day calculations and operational reporting
          - Enables weekend vs. weekday performance analysis
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_weekday
        description: >
          Flag indicating if the date falls on a weekday (Monday through Friday).
          
          Logic:
          - true when: day_of_week is 1-5 (Monday through Friday)
          - false when: day_of_week is 0 (Sunday) or 6 (Saturday)
          
          Business Impact:
          - Used to focus analysis on business operations
          - Critical for operational metrics and business day calculations
          - Enables weekday-specific performance analysis
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_holiday
        description: >
          Flag indicating if the date is a recognized US federal holiday.
          
          Logic:
          - true when: date matches US federal holiday calendar
          - false when: date is not a federal holiday
          
          Business Impact:
          - Used to adjust operational metrics for holiday closures
          - Critical for business day calculations and holiday-adjusted reporting
          - Enables accurate performance comparisons excluding holiday impacts
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_business_day
        description: >
          Flag indicating if the date is a business day (weekday and not a holiday).
          
          Logic:
          - true when: is_weekday = true AND is_holiday = false
          - false when: is_weekday = false OR is_holiday = true
          
          Business Impact:
          - Primary filter for operational metrics and business day calculations
          - Critical for operational reporting and business day averages
          - Enables accurate operational performance analysis
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: business_day_of_month
        description: >
          Sequential number of business days within the month (null for non-business days).
          Used for month-to-date calculations and business day averages.
        tests:
          - not_null:
              where: "is_business_day = true"

      - name: fiscal_year
        description: >
          Fiscal year (October through September).
          Used for financial reporting and budget comparisons.
        tests:
          - not_null

      - name: fiscal_quarter
        description: >
          Fiscal quarter (1-4, where Q1 is Oct-Dec).
          Used for financial reporting and quarterly analysis.
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4]

      - name: is_rolling_12_months
        description: >
          Flag indicating if the date falls within the last 12 months from current date.
          
          Logic:
          - true when: date_day between (current_date - interval '12 months') and current_date
          - false when: date_day is outside the 12-month rolling window
          
          Business Impact:
          - Used for rolling year analysis and trend calculations
          - Critical for rolling performance metrics and trend analysis
          - Automatically updates as current_date changes
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_same_period_prior_year
        description: >
          Flag indicating if the date falls within the same period last year (12-24 months ago).
          
          Logic:
          - true when: date_day between (current_date - interval '24 months') and (current_date - interval '12 months')
          - false when: date_day is outside the prior year period window
          
          Business Impact:
          - Used for year-over-year comparisons and growth analysis
          - Critical for performance trend analysis and growth calculations
          - Automatically updates as current_date changes
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_holiday_adjusted
        description: >
          Flag indicating if the date is either a holiday or weekend.
          
          Logic:
          - true when: is_holiday = true OR is_weekend = true
          - false when: is_holiday = false AND is_weekend = false
          
          Business Impact:
          - Used for holiday-adjusted performance metrics and comparisons
          - Critical for performance analysis excluding non-business periods
          - Enables accurate operational comparisons across time periods
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      # Required Metadata Columns (ALL models must have these)
      - name: _loaded_at
        description: "Timestamp when the data was loaded into the data warehouse by the ETL pipeline (using current_timestamp)"
        tests:
          - not_null
      
      - name: _created_at
        description: "Timestamp when the record was created in the source system (OpenDental). For date dimension, this represents when the date record was generated (using current_timestamp)."
        tests:
          - not_null
      
      - name: _updated_at
        description: "Timestamp when the record was last updated in the source system (OpenDental). For date dimension, this represents when the date record was last updated (using current_timestamp)."
        tests:
          - not_null
      
      - name: _transformed_at
        description: "Timestamp when the record was processed by the dbt mart model (using current_timestamp)"
        tests:
          - not_null
      
      - name: _mart_refreshed_at
        description: "Timestamp when the mart model was last refreshed (using current_timestamp)"
        tests:
          - not_null

    tests:
      # Model-level tests
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 4000
          max_value: 4100
          config:
            severity: error
            description: "Date dimension should contain approximately 11 years of data (2020-2030)"
      
      - dbt_expectations.expression_is_true:
          expression: "date_id = date_day"
          config:
            severity: error
            description: "date_id and date_day must always match for consistency"
      
      - dbt_expectations.expression_is_true:
          expression: "year >= 2020 and year <= 2030"
          config:
            severity: error
            description: "All dates must fall within the defined date range (2020-2030)"
      
      - dbt_expectations.expression_is_true:
          expression: "is_business_day = (is_weekday and not is_holiday)"
          config:
            severity: error
            description: "Business day logic must correctly combine weekday and holiday flags"

    meta:
      owner: "Data Team"
      contains_pii: false
      contains_phi: false
      business_process: "Time Intelligence and Calendar Management"
      refresh_frequency: "daily"
      business_impact: "High"
      mart_type: "dimension"
      grain_description: "One row per calendar day"
      primary_consumers: ["Finance Team", "Operations Team", "Analytics Team"]
      data_quality_requirements:
        - "All dates must be unique and sequential"
        - "Holiday calendar must be accurate and up-to-date"
        - "Business day calculations must exclude weekends and holidays"
        - "Fiscal periods must align with business planning cycles"
        - "Rolling period flags must update correctly relative to current_date"
      performance_requirements:
        - "Query performance optimized for date range filtering"
        - "Join performance optimized for fact table relationships"
        - "Index strategy supports common analytical patterns"
        - "Pre-calculated flags minimize runtime calculations" 