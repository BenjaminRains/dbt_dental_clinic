version: 2

models:
  - name: stg_opendental__paysplit
    description: >
      Staging model for OpenDental payment splits. Payment splits represent individual allocations
      of payments to specific procedures, adjustments, or payment plans. This model includes
      data from 2023-01-01 onwards and is incrementally loaded.

      Purpose:
      - Allocate income to clinics, production, providers, or unearned income types
      - Track payment allocations to procedures, adjustments, or payment plans
      - Support prepayment and unearned income tracking
      - Enable hidden splits for prepayments and treatment planning
      
      Split Types:
      - Regular splits: Visible on account, attached to completed procedures/adjustments
      - Hidden splits: Not shown on account, used for prepayments and treatment planning
      - Unearned splits: Track prepayments and deferred income
      
      Split Patterns:
      - Most payments have 1-2 splits (median = 2)
      - Some administrative entries (payment_type_id = 0) can have hundreds of splits
      - High-split patterns (100+ splits) are typically:
        * Administrative/batch operations
        * Treatment plan allocations
        * System-generated entries
        * Characterized by payment_amount = 0.0
        * Recent dates (typically within current month)
      
      Common Split Amounts:
      - Most frequent: $31.00, $60.00, $109.00
      - Common refund amounts: -$29.00, -$53.00, -$30.00
      - Small amounts (<$10) often represent adjustments or fees
      
      Discount Tracking:
      - Discounts are primarily tracked through two mechanisms:
        1. Procedure-level discounts:
           * Stored in procedurelog.Discount
           * Typically used for higher-value procedures (avg $1,110)
           * Often accompanied by adjustments (avg -$554)
        2. Adjustment-level discounts:
           * Stored in adjustment.AdjType and AdjAmt
           * Used for highest-value procedures (avg $2,945)
           * Common adjustment types:
             - 186: Senior discount
             - 472, 474, 475: Provider discounts
             - 486: Family discount
             - 9: Cash discount
      - Note: The paysplit.IsDiscount and DiscountType fields are currently unused
        and should not be relied upon for discount tracking
      
      Business Rules:
      - Each split must be allocated to either a procedure, adjustment, or payment plan
      - Zero amount splits must be valid (discounts, unearned revenue)
      - Unearned revenue splits must have a provider
      - Split amounts must be within reasonable ranges
      - High-split administrative entries require special validation
      - Payment type 0 entries need additional verification
      - Clinic and Provider inherit from attached procedures/adjustments
      - Rigorous validation when attached to procedures
      - Prevents overpayment with warnings
      
      Hidden Split Rules:
      - Must have an Unearned Type flagged as "Do Not Show on Account"
      - Typically used for payment plan prepayments or treatment planned procedures
      - Tracked separately in Account Module
      - Automatically transfer to visible splits when procedures complete
      - Generate income transfers when moved between hidden/visible status
    
    meta:
      record_count: "~850K records"
      data_scope: "Payment splits from 2023-01-01 onwards"
      contains_pii: true
      owner: "mdc analytics team"
      
      known_issues:
        - description: "Some administrative entries (payment_type_id = 0) can have hundreds of splits with zero amounts"
          severity: "warn"
          identified_date: "2024-01-15"
          impact: "May affect performance for certain queries; use appropriate filters"
        
        - description: "IsDiscount and DiscountType fields are unused in source system (always 0)"
          severity: "warn"
          identified_date: "2024-01-15"
          impact: "Cannot rely on these fields for discount tracking; use procedurelog.Discount and adjustment.AdjType instead"
        
        - description: "Forward_split_id field is legacy and unused (always NULL)"
          severity: "warn"
          identified_date: "2024-01-15"
          impact: "Field maintained for backward compatibility but has no business value"
        
        - description: "7,327 payment splits reference procedure_ids that don't exist in procedurelog table"
          severity: "warn"
          identified_date: "2024-01-15"
          impact: "Orphaned procedure references may indicate deleted procedures or data integrity issues. Use LEFT JOINs when joining to procedurelog."
          test: "relationships_stg_opendental__paysplit_procedure_id"
        
        - description: "1,431 payment splits reference adjustment_ids that don't exist in adjustment table"
          severity: "warn"
          identified_date: "2024-01-15"
          impact: "Orphaned adjustment references may indicate deleted adjustments or data integrity issues. Use LEFT JOINs when joining to adjustment."
          test: "relationships_stg_opendental__paysplit_adjustment_id"
      
      business_rules:
        - rule: "Payment splits must be allocated unless they are unearned income types (0, 288, 439, 598, 641)"
          impact: "Critical for proper revenue allocation and financial reporting. Unearned income/prepayments can remain unallocated until procedures are completed."
        
        - rule: "Treatment plan unearned revenue (type 439) must have a provider assigned"
          impact: "Required for proper income transfer tracking. Outgoing transfers (type 288) may be system-generated without provider assignment."
        
        - rule: "Split amounts should not be zero unless marked as discount, has unearned_type=288, or has procedure_id"
          impact: "Zero amounts require special business justification to maintain data integrity"
        
        - rule: "Cannot allocate to both procedure and adjustment simultaneously"
          impact: "Prevents double-counting of revenue allocations"
      
      usage_notes: >
        Key usage considerations:
        - Use procedure_date for timing analysis when available, fall back to payment_date
        - Filter out payment_type_id = 0 entries for standard financial reporting
        - Consider using aggregated views for performance when analyzing high-split payments
        - For discount analysis, use procedurelog.Discount and adjustment.AdjType rather than paysplit discount fields
        - Unearned type classification is critical for proper income transfer tracking
        - Hidden splits require special handling and are not visible in standard patient accounts
        - Unallocated splits with unearned_type 0, 288, or 439 are valid prepayments waiting for procedure completion
        - Type 288 transfers may legitimately lack provider assignment when system-generated
        - Large unallocated amounts often represent treatment plan prepayments

    tests:
      # Test: Non-unearned splits must be allocated to either a procedure, adjustment, or payment plan
      - dbt_utils.expression_is_true:
          expression: "unearned_type IN (0, 288, 439, 598, 641) OR (procedure_id IS NOT NULL OR adjustment_id IS NOT NULL OR payplan_charge_id IS NOT NULL)"
          config:
            severity: error
            description: "Payment splits must be allocated unless they are unearned income types (prepayments, transfers, treatment plans) which can remain unallocated until procedures are completed."
      
      # Test: Split amount should not be zero unless it's marked as a discount, has unearned_type=288, or has a procedure_id
      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              split_amount = 0 
              AND is_discount = false
              AND unearned_type != 288
              AND procedure_id IS NULL
            )
          config:
            severity: warn
            description: "Zero amount splits must have valid business justification (discount, unearned type 288, or procedure allocation)"
      
      # Test: Incoming unearned splits (type 439) must have a provider assigned
      - dbt_utils.expression_is_true:
          expression: "NOT (unearned_type = 439 AND provider_id IS NULL)"
          config:
            severity: warn
            description: "Treatment plan unearned revenue (type 439) typically requires provider assignment. 4 records (1.2%) lack providers - appear to be reversal/correction entries that net to $0."

      # Test: Cannot allocate to both procedure and adjustment
      - dbt_utils.expression_is_true:
          expression: "NOT (procedure_id IS NOT NULL AND adjustment_id IS NOT NULL)"
          config:
            severity: error
            description: "Payment splits cannot be allocated to both procedure and adjustment simultaneously to prevent double-counting"

      # Test: Cannot allocate to both adjustment and payment plan charge
      - dbt_utils.expression_is_true:
          expression: "NOT (adjustment_id IS NOT NULL AND payplan_charge_id IS NOT NULL)"
          config:
            severity: error
            description: "Payment splits cannot be allocated to both adjustment and payment plan charge simultaneously"

      # Test: If payplan_id exists, payplan_charge_id must exist
      - dbt_utils.expression_is_true:
          expression: "NOT (payplan_id IS NOT NULL AND payplan_charge_id IS NULL)"
          config:
            severity: error
            description: "Payment plan allocations must include both payment plan ID and payment plan charge ID"

      # Test: Forward split ID field is unused and should always be 0
      - dbt_utils.expression_is_true:
          expression: "forward_split_id = 0"
          config:
            severity: warn
            description: "Forward split ID is a legacy field that should always be 0 in current system"

      # Test: Discount type field is unused and should always be 0
      - dbt_utils.expression_is_true:
          expression: "discount_type = 0"
          config:
            severity: warn
            description: "Discount type field is unused in source system and should always be 0"

      # Test: Is discount field is unused and should always be false
      - dbt_utils.expression_is_true:
          expression: "is_discount = false"
          config:
            severity: warn
            description: "Is discount field is unused in source system and should always be false"

    columns:
      # Primary Key
      - name: paysplit_id
        description: "Primary key - Unique identifier for each payment split record (maps to SplitNum in OpenDental)"
        tests:
          - unique
          - not_null

      # Core Relationship Columns
      - name: payment_id
        description: >
          Foreign key to the parent payment record. Some administrative payments (type 0) 
          can have hundreds of splits. (maps to PayNum in OpenDental)
          Note: 8 payment splits reference 3 deleted payments (923660, 919227, 923856) - retained for financial audit purposes
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__payment')
              field: payment_id
              config:
                severity: warn

      - name: patient_id
        description: "Foreign key to the patient associated with this payment split (maps to PatNum in OpenDental)"
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id
              severity: error

      - name: clinic_id
        description: "Foreign key to the clinic where the payment split was recorded (maps to ClinicNum in OpenDental, nullable when 0)"
        # TODO: Enable when stg_opendental__clinic is available
        # tests:
        #   - relationships:
        #       to: ref('stg_opendental__clinic')
        #       field: clinic_id
        #       severity: warn

      - name: provider_id
        description: "Foreign key to the provider associated with this payment split (maps to ProvNum in OpenDental, nullable when 0)"
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id
              severity: warn

      # Allocation Target Columns
      - name: procedure_id
        description: "Foreign key to the dental procedure this split is applied to (maps to ProcNum in OpenDental, nullable when 0)"
        tests:
          - relationships:
              to: ref('stg_opendental__procedurelog')
              field: procedure_id
              severity: warn

      - name: adjustment_id
        description: "Foreign key to any related adjustment record (maps to AdjNum in OpenDental, nullable when 0)"
        tests:
          - relationships:
              to: ref('stg_opendental__adjustment')
              field: adjustment_id
              severity: warn

      - name: payplan_id
        description: "Foreign key to the associated payment plan, if applicable (maps to PayPlanNum in OpenDental, nullable when 0)"

      - name: payplan_charge_id
        description: "Foreign key to the specific payment plan charge (maps to PayPlanChargeNum in OpenDental, nullable when 0)"

      # Legacy/Unused Fields
      - name: forward_split_id
        description: >
          Legacy field for tracking payment split references. Currently unused in the system.
          
          Current State:
          - Always NULL in the source system (maps to FSplitNum in OpenDental)
          - Maintained for backward compatibility
          - Index exists but is not actively used
          
          Historical Context:
          - Originally named "FSplitNum" in source system
          - Was potentially used for payment plan or prepayment tracking
          - Field and index remain in place for backward compatibility
          
          Business Rules:
          - Expected value is NULL for all records
          - No active validation required
          - No impact on current payment processing

      # Financial Details
      - name: split_amount
        description: >
          The monetary amount of this payment split.
          Common patterns:
          - Most frequent: $31.00, $60.00, $109.00
          - Common refunds: -$29.00, -$53.00, -$30.00
          - Small amounts (<$10) often represent adjustments
        tests:
          - not_null

      # Date Columns
      - name: payment_date
        description: "Date when the payment was made (maps to DatePay in OpenDental)"
        tests:
          - not_null

      - name: procedure_date
        description: "Date of the associated procedure, if applicable (maps to ProcDate in OpenDental)"

      - name: entry_date
        description: "Date when the payment split was entered into the system (maps to DateEntry in OpenDental, cleaned for invalid dates)"

      # Type and Classification Columns
      - name: discount_type
        description: >
          Type of discount if this split represents a discount (maps to DiscountType in OpenDental).
          
          Note: This field is currently unused in the source system and is always 0.
          For actual discount tracking, refer to:
          1. procedurelog.Discount for procedure-level discounts
          2. adjustment.AdjType for adjustment-level discounts
        tests:
          - not_null

      - name: unearned_type
        description: >
          Classification for unearned payment types. Critical for income transfer tracking.
          
          Category 29 Unearned Types:
          
          1. Type 0 (Default/Incoming):
             * Used for incoming/receiving transfers
             * Must have positive amounts
             * Default unearned type for unallocated paysplits
             * Represents base prepayment/unearned income
          
          2. Type 288 (Prepayment/Outgoing):
             * Used for outgoing/sending transfers
             * Must have negative amounts
             * Explicitly defined as "Prepayment"
             * Used to track money being moved out
          
          3. Type 439 (Treatment Plan):
             * Specific to treatment plan prepayments
             * Has special handling (item_value = 'X')
             * Used for treatment planned procedures
             * Tracks prepayments before procedure completion
          
          4. Type 598 (Payment Plan):
             * Specific to payment plan prepayments
             * Has special handling (item_value = 'X')
             * Used for recurring payment tracking
             * Links prepayments to payment plans
          
          5. Type 641 (Refund):
             * Hidden type for refund tracking
             * Used internally by the system
             * Not visible in standard reports
          
          Transfer Rules:
          - Regular transfers use 0/288 pair
          - Treatment plan prepayments use 439
          - Payment plan prepayments use 598
          - Refunds tracked with 641
          - All types require provider assignment
          
          Validation:
          - Type 0: Must be positive amounts
          - Type 288: Must be negative amounts
          - Types 439/598: Must have procedure/plan links
          - All types: Provider assignment required
          - Hidden types: Not shown in standard reports

      - name: payplan_debit_type
        description: "Type of debit if associated with a payment plan (maps to PayPlanDebitType in OpenDental)"

      # Boolean Flags
      - name: is_discount
        description: >
          Boolean flag indicating if this split represents a discount (maps to IsDiscount in OpenDental, converted from 0/1 to boolean).
          
          Note: This field is currently unused in the source system (always false).
          Discounts are tracked through:
          1. procedurelog.Discount for procedure-level discounts
          2. adjustment.AdjType and AdjAmt for adjustment-level discounts
        tests:
          - not_null

      # User Tracking
      - name: _created_by
        description: "User who created the payment split record in the source system (OpenDental). Maps to SecUserNumEntry, may be null for system-generated entries."

      # Standardized Metadata Columns
      - name: _loaded_at
        description: "Timestamp when the data was loaded into the data warehouse by the ETL pipeline (using current_timestamp)"
        tests:
          - not_null

      - name: _transformed_at
        description: "Timestamp when the record was transformed into the data warehouse by the ETL pipeline (using current_timestamp)"
        tests:
          - not_null

      - name: _created_at
        description: "Timestamp when the record was created in the source system (OpenDental). Maps to DateEntry column."
        tests:
          - not_null
      - name: _updated_at
        description: "Timestamp when the record was updated in the source system (OpenDental). Maps to SecDateTEdit column."
        tests:
          - not_null

      - name: entry_date
        description: "Timestamp when the record was created in the source system (OpenDental). Maps to DateEntry, cleaned for invalid dates."
        tests:
          - not_null

      - name: date_updated
        description: "Timestamp when the record was last updated in the source system (OpenDental). Maps to SecDateTEdit."
        tests:
          - not_null
