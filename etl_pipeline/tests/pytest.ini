[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    comprehensive: Comprehensive tests that cover all functionality with real dependencies
    unit: Unit tests with mocking logic and mocking dependencies
    integration: Integration tests on test environment with test data
    e2e: End-to-end tests on production environment with test data
    slow: Tests that take longer to run
    performance: Performance benchmarks
    idempotency: Idempotency and incremental load tests
    incremental: Incremental loading tests
    critical: critical tests that must pass for production
    validation: Configuration validation tests
    config: Configuration system tests
    scripts: Tests for ETL pipeline scripts and utilities
    order: Test execution order (provided by pytest-order plugin)
    # Provider pattern and dependency injection markers
    provider_pattern: Tests using provider pattern dependency injection (DictConfigProvider/FileConfigProvider)
    settings_injection: Tests using Settings injection for environment-agnostic connections
    fail_fast: Tests for FAIL FAST behavior when ETL_ENVIRONMENT not set
    environment_separation: Tests for production vs test environment separation
    enum_validation: Tests using DatabaseType and PostgresSchema enums for type safety
    error_handling: Tests for error scenarios with provider pattern
    business_rules: Tests for business rule validation with provider pattern
    consistency: Tests for configuration consistency with provider pattern
    config_reader: Tests for ConfigReader validation with provider pattern
    # Database-specific markers
    mysql: Tests requiring MySQL/MariaDB v11.6 connection
    postgres: Tests requiring PostgreSQL connection
    # ETL-specific markers
    etl_critical: Tests for critical ETL pipeline components
    dental_clinic: Tests specific to dental clinic data structures
    # Schema and data conversion markers
    schema_conversion: Tests for schema conversion between database types
    monitoring: Tests for ETL pipeline monitoring and metrics collection
    # Orchestration markers
    orchestration: Tests for ETL pipeline orchestration and coordination
    # Production integration tests
    production: Tests for production integration with real data

# Test categories
addopts = 
    --verbose
    --tb=short
    --cov=etl_pipeline
    --cov-report=term-missing
    --cov-report=html
    --no-cov-on-fail
    --strict-markers
    --disable-warnings

# Filter warnings
filterwarnings =
    ignore::pytest.PytestCollectionWarning:click.* 