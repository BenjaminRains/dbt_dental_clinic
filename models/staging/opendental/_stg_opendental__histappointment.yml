version: 2

models:
  - name: stg_opendental__histappointment
    description: >
      Staging model for historical appointment data from OpenDental.
      Tracks all changes made to appointments over time as a series of snapshots.
      Only includes historical records from January 1, 2023 onwards.
      
      Each record represents a snapshot of an appointment at a specific point in time.
      The majority of records use history_action=1 regardless of sequence, which appears
      to be the OpenDental system's standard way of tracking changes over time.
      The current state of appointments is stored in the appointment table.
      
      NOTE: Data analysis shows that history_action=1 does NOT indicate "initial creation only"
      but rather "a history snapshot was created" - most appointments have dozens of history_action=1
      records spanning their entire lifecycle.
      
      Note: While created_timestamp exists in the source data, it appears to be 
      in a different timezone than history_timestamp. For analysis purposes, we 
      focus on the chronological order of history records rather than comparing 
      against created_timestamp.
    tests:
      - dbt_utils.at_least_one:
          column_name: hist_appointment_id
      - dbt_utils.expression_is_true:
          expression: "history_timestamp >= '2023-01-01'"
          config:
            severity: warn
      # Replace the problematic chronological order test with our custom test
      - histappointment_chronology
      # High-level tests - keeping valid ones
      - dbt_utils.expression_is_true:
          expression: "history_action in (0,1,2,3,4)"
          severity: error
      - dbt_utils.expression_is_true:
          expression: "appointment_status in (1,2,3,5,6)"
          severity: error  # This must pass
      - dbt_utils.expression_is_true:
          expression: "history_timestamp <= current_timestamp"
          severity: error
      - dbt_utils.expression_is_true:
          expression: "appointment_status != 2 OR appointment_datetime <= history_timestamp"
          severity: error
      
      # Custom test to monitor missing appointments pattern
      - histappointment_missing_appointments:
          description: >
            Monitors the expected pattern of deleted appointments with preserved history.
            Tracks both the number of missing appointments and their associated history records.
            Alerts if the distribution changes significantly from the established baseline.
            This is an informational test that helps track data quality without failing the model.
          severity: warn
    
    # Documentation of custom data quality tests
    meta:
      test_descriptions:
        - test: "histappointment_chronology"
          description: >
            Ensures history records for each appointment maintain chronological order.
            First records (with NULL previous_timestamp) are expected and ignored.
      
      data_quality_analyses:
        - name: histappointment_chronology
          description: >
            Checks that history records maintain chronological order within each appointment.
            The test only verifies that consecutive history records are properly ordered,
            ignoring the first record of each appointment (NULL previous_timestamp).
            Created timestamp comparisons have been removed as they are not relevant
            for chronological ordering of history records.
          file_path: tests/staging/histappointment_chronology.sql
          type: "data_quality"
          
        - name: histappointment_action_complete
          description: >
            Informational analysis of data completeness in history records.
            Identifies records with potential missing fields, but does not fail tests
            since incomplete records may be normal in the OpenDental system.
            To see results, run the query directly with analysis_mode=true.
          file_path: tests/staging/histappointment_action_complete.sql
          type: "informational"
          
        - name: histappointment_appt_coverage
          description: >
            Informational analysis that examines whether appointments with significant 
            status changes have corresponding history records tracking those changes.
          file_path: tests/staging/histappointment_appt_coverage.sql
          type: "informational"
          
        - name: histappointment_missing_records
          description: >
            Tests for appointments with completely missing history records.
            Only fails for appointments that have zero history records, as other
            patterns (like missing creation records) have been found to be normal
            in the OpenDental system.
          file_path: tests/staging/histappointment_missing_records.sql
          expected_results: 0
          
        - name: histappointment_action_consistency
          description: >
            Informational analysis of history action patterns in OpenDental.
            This identifies various patterns like missing creation records, unusual
            sequences, etc., but these are treated as informational rather than errors
            since our analysis shows that certain patterns we initially thought were
            problematic are actually normal in the OpenDental system.
            To see results, run the query directly with analysis_mode=true.
          file_path: tests/staging/histappointment_action_consistency.sql
          type: "informational"
      
      history_action_analysis:
        - finding: "Most appointments have 80-95% of their history records marked as history_action=1"
        - finding: "These history_action=1 records span the entire lifecycle of appointments, often across hundreds of days"
        - finding: "This appears to be by design in the OpenDental system - history_action=1 indicates 'snapshot created'"
        - finding: "Many appointments that have history records don't have any with history_action=1, which we initially thought was required"
        - finding: "Large gaps between consecutive history records (60-500+ days) are common and don't indicate data quality issues"
        - conclusion: "Tests and analyses should not assume history_action=1 means 'first/initial creation only'"
        - conclusion: "Missing creation records and large gaps should be treated as informational, not errors"
    
    columns:
      - name: hist_appointment_id
        description: Primary key - Unique identifier for each historical appointment record
        tests:
          - unique
          - not_null
      
      # Foreign keys
      - name: appointment_id
        description: >
          Foreign key to the appointment this history record relates to.
          Note: Some historical appointments may reference appointments that have been deleted.
          Data analysis shows that:
          - ~3,116 unique appointments are missing from the appointments table
          - These missing appointments have ~13,273 associated history records
          - This is expected as appointments may be deleted while their history is preserved
          - The relationship test is configured to warn (not error) for this expected pattern
          - Missing appointments typically have multiple history records (avg ~4.26 records per appointment)
          - Most missing appointments (56.87%) have 2-5 history records
          - A significant portion (24.45%) have more than 5 history records
          - Only 18.68% have a single history record
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__appointment')
              field: appointment_id
              severity: warn
      
      - name: patient_id
        description: >
          Foreign key to the patient associated with this appointment.
          Note: Some historical records may reference patients that have been deleted or merged.
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id
              severity: warn
      
      - name: provider_id
        description: >
          Foreign key to the provider table.
          Note: provider_id = 0 is a valid value indicating "No Provider" or "Unassigned".
          This is commonly seen in special modification records (history_action = 4) where
          appointments are being configured or modified without an assigned provider.
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id
              where: "provider_id != 0"  # Exclude unassigned provider records
              severity: error
      
      - name: hygienist_id
        description: >
          Foreign key to the provider table for the hygienist.
          Note: hygienist_id = 0 is a valid value indicating "No Hygienist".
          Data analysis shows:
          - 82,213 records have hygienist_id = 0 (no hygienist)
          - These affect 2,952 unique patients and 9,941 unique appointments
          - Spans from Jan 2023 to Feb 2025
          - Associated with multiple appointment types and providers
          - Has all possible appointment statuses and history actions
          
          Business Context: This field tracks hygienist assignments over time.
          The high number of records with hygienist_id = 0 reflects that many
          appointments don't require a hygienist, which is normal in dental
          practices. This is similar to how we handle provider_id = 0 for
          unassigned providers.
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id
              where: "hygienist_id != 0"  # Exclude records with no hygienist
              severity: error  # Now we can use error since we're excluding the valid 0 values
      
      - name: assistant_id
        description: >
          Foreign key to the provider table for the assistant.
          Note: assistant_id = 0 is a valid value indicating "No Assistant".
          Data analysis shows:
          - 253,756 records have assistant_id = 0 (no assistant)
          - These affect 4,561 unique patients and 23,487 unique appointments
          - Spans from Jan 2023 to Feb 2025
          - Has all possible appointment statuses and history actions
          - Associated with multiple providers and hygienists
          
          Business Context: This field tracks assistant assignments over time.
          The high number of records with assistant_id = 0 reflects that many
          appointments don't require an assistant, which is normal in dental
          practices. This is similar to how we handle hygienist_id = 0 for
          appointments without a hygienist.
          
          Note: There are 5 records with assistant_id = 9280 from Jan 24, 2025,
          affecting one patient and one appointment. These records are future-dated
          and reference a non-existent assistant, suggesting a data entry error
          or system issue that should be investigated.
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id
              where: "assistant_id != 0"  # Exclude records with no assistant
              severity: error  # Keep as error since these are future-dated records
      
      - name: clinic_id
        description: Foreign key to the clinic where this appointment was scheduled
      
      - name: next_appointment_id
        description: >
          Foreign key to the appointment table for the next scheduled appointment.
          Note: Data analysis shows that many history records (221,541) reference next appointments
          that no longer exist. This is expected because:
          - Next appointments can be deleted while their history is preserved
          - The next_appointment_id is often temporary and changes as appointments are rescheduled
          - This is similar to how we handle missing appointment_id references
          
          Business Context: This field is crucial for tracking treatment plan continuity,
          analyzing rescheduling patterns, and monitoring patient care flow. The high number
          of missing references reflects normal clinic operations where treatment plans
          and appointment sequences evolve over time.
        tests:
          - relationships:
              to: ref('stg_opendental__appointment')
              field: appointment_id
              severity: warn  # Set to warn since this is an expected pattern
      
      - name: appointment_type_id
        description: Foreign key to the appointment type table
        tests:
          - relationships:
              to: ref('stg_opendental__appointmenttype')
              field: appointment_type_id
      
      - name: operatory_id
        description: Foreign key to the operatory (chair/room) for this appointment
      
      - name: history_user_id
        description: >
          Foreign key to the user table for the user who made the change.
          Note: history_user_id = 0 is a valid value indicating "System User" or
          "Automated Process". Data analysis shows:
          - 1,714 records have history_user_id = 0 (system-generated)
          - These affect 844 unique patients and 901 unique appointments
          - Spans from Jan 2023 to Oct 2024
          - All records have appointment_status = 1 (Scheduled)
          - Has history_action values of 0 (Unknown) and 1 (History snapshot)
          - Associated with specific providers (28, 47, 48, 52)
          
          Business Context: This field tracks who made changes to appointments.
          The records with history_user_id = 0 appear to be system-generated
          records, likely for initial appointment creation or automated processes.
          This is different from entry_user_id, which tracks the user who entered
          the record into the system.
        tests:
          - relationships:
              to: ref('stg_opendental__userod')
              field: user_id
              where: "history_user_id != 0"  # Exclude system-generated records
              severity: error  # Now we can use error since we're excluding the valid 0 values
      
      - name: entry_user_id
        description: >
          Foreign key to the user table for the user who entered the record.
          Note: entry_user_id = 0 is a valid value indicating "System User" or
          "Automated Process". Data analysis shows:
          - 11,336 records have entry_user_id = 0 (system-generated)
          - These affect 951 unique patients and 1,077 unique appointments
          - Spans from Jan 2023 to Feb 2025
          - Has multiple appointment statuses (0,1,2,3,5)
          - Has all possible history actions (0,1,2,3,4)
          - Associated with multiple providers (0,1,28,29,47,50,52)
          
          Business Context: This field tracks who entered the record into the system.
          The records with entry_user_id = 0 appear to be system-generated records,
          likely for automated processes or system-initiated changes. This is different
          from history_user_id, which tracks who made the actual change to the
          appointment. The broader range of statuses and actions suggests these
          records cover various types of system operations.
        tests:
          - relationships:
              to: ref('stg_opendental__userod')
              field: user_id
              where: "entry_user_id != 0"  # Exclude system-generated records
              severity: error  # Now we can use error since we're excluding the valid 0 values
      
      - name: insurance_plan_1_id
        description: >
          Foreign key to the insurance plan table for primary insurance.
          Note: insurance_plan_1_id = 0 is a valid value indicating "No Primary Insurance".
          Data analysis shows:
          - 67,238 records have insurance_plan_1_id = 0 (no primary insurance)
          - These affect 3,560 unique patients and 9,758 unique appointments
          - The remaining 1,275 records reference other missing insurance plans
          - Most common missing plan is 11006 (219 records)
          - These other missing references affect 1-3 patients each
          
          Analysis of missing insurance plans shows:
          - Most are "one-time" plans that were never updated
          - They're always the first and last insurance plan for their appointments
          - Only one plan (11200) shows any insurance changes
          - All records are from 2023-2024
          - Most common statuses are Scheduled (1) and Completed (2)
          
          Business Context: This field tracks primary insurance coverage over time.
          The high number of records with insurance_plan_1_id = 0 reflects that many
          patients don't have primary insurance, which is normal in dental practices.
          The other missing references appear to be temporary insurance plans that
          were created for specific appointments and then deleted or replaced.
        tests:
          - relationships:
              to: ref('stg_opendental__insplan')
              field: insurance_plan_id
              where: "insurance_plan_1_id != 0"  # Exclude records with no primary insurance
              severity: warn  # Changed to warn since these appear to be expected patterns
      
      - name: insurance_plan_2_id
        description: >
          Foreign key to the insurance plan table for secondary insurance.
          Note: insurance_plan_2_id = 0 is a valid value indicating "No Secondary Insurance".
          Data analysis shows:
          - 237,666 records have insurance_plan_2_id = 0 (no secondary insurance)
          - 12 records reference actual missing insurance plans (IDs: 11200, 12566, 12746, 14152)
          - These 12 records affect 4 unique patients and 5 unique appointments
          - Most of these records are from 2023, with one from 2024
          
          Business Context: This field tracks secondary insurance coverage over time.
          The high number of records with insurance_plan_2_id = 0 reflects that many
          patients don't have secondary insurance, which is normal in dental practices.
          The 12 records with missing references may indicate data entry errors or
          insurance plan deletions that should be investigated.
        tests:
          - relationships:
              to: ref('stg_opendental__insplan')
              field: insurance_plan_id
              where: "insurance_plan_2_id != 0"  # Exclude records with no secondary insurance
              severity: error  # Now we can use error since we're excluding the valid 0 values
      
      - name: unscheduled_status_id
        description: Status identifier for unscheduled appointments
      
      - name: confirmation_id
        description: Identifier for the confirmation status of this appointment
      
      # Timestamps
      - name: history_timestamp
        description: Timestamp when the history record was created
        tests:
          - not_null
      
      - name: created_timestamp
        description: Timestamp when the appointment was created
        tests:
          - not_null
      
      - name: appointment_datetime
        description: Scheduled date and time of the appointment
        tests:
          - not_null
      
      - name: arrived_datetime
        description: Timestamp when the patient arrived for the appointment
      
      - name: seated_datetime
        description: Timestamp when the patient was seated in the operatory
      
      - name: dismissed_datetime
        description: Timestamp when the patient was dismissed after the appointment
      
      - name: asked_to_arrive_datetime
        description: Timestamp when the patient was asked to arrive for the appointment
      
      - name: entry_datetime
        description: >
          Timestamp when the record was entered into the system.
          Note: NULL is a valid value for system-generated records.
          Data analysis shows:
          - 1,057 records have NULL entry_datetime
          - These are all system-generated records (entry_user_id = 0)
          - All have history_action = 1 (History snapshot)
          - Most have appointment_status = 5 (Broken/Missed)
          - All have assistant_id = 0 (No Assistant)
          - All have either history_user_id = 29 or 57
          - Most appointment dates are from 2018-2020
          - History timestamps are from 2023-2025
          
          Business Context: This field tracks when records are entered into the system.
          The NULL values appear in automated cleanup records where the system
          marks old, uncompleted appointments as broken/missed. These records
          are generated by system users (29 and 57) and don't have an entry
          timestamp since they're automated.
        tests:
          - not_null:
              severity: warn  # Changed to warn since NULL is valid for system records
      
      # Flags and status indicators
      - name: appointment_status
        description: >
          Status code of the appointment:
            1 = Scheduled (active appointments not yet completed)
            2 = Completed (appointments fulfilled with services rendered)
            3 = Unknown (requires investigation, may indicate data quality issues)
            5 = Broken/Missed (patient no-show or late cancellation)
            6 = Unscheduled (treatment planned but not yet scheduled)
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 5, 6]
              severity: error
      
      - name: history_action
        description: >
          Code indicating the type of action that created this history record:
          0 = Unknown
          1 = History snapshot created
          2 = Modified
          3 = Deleted
          4 = Special modification (possibly rescheduling or appointment type changes)
          
          Data analysis shows that history_action=1 is used for most history records
          regardless of sequence, representing ongoing changes rather than just initial creation.
        tests:
          - not_null
          - accepted_values:
              values: [0, 1, 2, 3, 4]
              severity: error
      
      - name: appointment_source
        description: Source of the appointment (e.g., phone, online, walk-in)
        tests:
          - accepted_values:
              values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      
      - name: is_time_locked
        description: Boolean flag indicating if the appointment time is locked
        tests:
          - not_null
      
      - name: is_new_patient
        description: Boolean flag indicating if this is a new patient appointment
        tests:
          - not_null
      
      - name: is_hygiene
        description: Boolean flag indicating if this is a hygiene appointment
        tests:
          - not_null
      
      - name: priority
        description: Priority level of the appointment
        tests:
          - accepted_values:
              values: [0, 1, 2, 3, 4, 5]
      
      # Text fields and descriptors
      - name: pattern
        description: Pattern string defining the graphical representation and time slots
      
      - name: pattern_secondary
        description: Secondary pattern of the appointment
      
      - name: note
        description: Notes about the appointment
      
      - name: procedure_description
        description: Description of the procedures scheduled for the appointment
      
      - name: procedures_colored
        description: Colored procedures for the appointment
      
      - name: provider_bar_text
        description: Text displayed in the provider bar for this appointment
      
      # Other attributes
      - name: color_override
        description: Override color for the appointment in the schedule
      
      - name: security_hash
        description: Security hash for the appointment
      
      - name: item_order_planned
        description: Planned order of items for the appointment
      
      # Metadata columns
      - name: _loaded_at
        description: Timestamp when the data was loaded into the data warehouse by the ETL pipeline
        tests:
          - not_null
      
      - name: _created_at
        description: Timestamp when the historical appointment record was created in the source system (OpenDental)
        tests:
          - not_null
      
      - name: _updated_at
        description: Timestamp when the historical appointment record was last updated in the source system (OpenDental)
        tests:
          - not_null
