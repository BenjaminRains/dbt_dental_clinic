version: 2

models:
  - name: int_payment_allocated
    description: >
      Intermediate model for payment allocations that combines patient payments and 
      insurance payments. This model serves as the foundation for payment reconciliation 
      and accounts receivable analysis.
      Part of System C: Payment Allocation & Reconciliation.
      
      Key features:
      - Combines patient payments and insurance payments
      - Tracks payment allocations and status
      - Maintains payment processing information
      - Preserves detailed payment metadata
      - Supports AR calculations and aging analysis
      - Generates unique payment_allocation_id using ROW_NUMBER() over payment_source_type
       and payment_id
      - Note: Payment plan functionality is reserved for future implementation (OpenDental 
        supports payment plans but they are not currently used by MDC clinic)
      
      Data Sources:
      - stg_opendental__payment: Base patient payment information
      - stg_opendental__paysplit: Payment split information and procedure links
      - stg_opendental__claimpayment: Insurance payment details
      - stg_opendental__claimproc: Claim procedure information and provider assignments.
      - stg_opendental__procedurelog: Procedure information and provider assignments.
      - stg_opendental__definition: Payment type and status definitions
      
      Business rules:
      - Insurance claims are filtered to only include:
        * Status 1 (Received) or 3 (Supplemental) claims
        * Claims with a valid claim_payment_id (excludes claim_payment_id = 0)
      - Payment dates are used for AR calculations
      - Payment types and statuses are managed through the definition table
      - Payment allocations must be properly linked to procedures or claims
      - Provider assignments are sourced from:
        * stg_opendental__claimproc for insurance payments
        * stg_opendental__procedurelog for patient payments (via paysplit join)
      - Patient payment provider assignments are determined through:
        * Payment -> Paysplit -> Procedurelog join path
        * Ensures accurate provider attribution for split payments
      - Payment allocation IDs are generated using:
        * ROW_NUMBER() over payment_source_type and payment_id
        * Ensures unique identifiers across both payment types

      Date Handling and COALESCE Logic:
      - Insurance Payment Dates:
        * Primary: insurance_finalized_date from claimproc
        * Fallback: check_date from claimpayment
        * Used for: payment_date, entry_date, updated_at
      - Patient Payment Dates:
        * Primary: payment_date from payment
        * Used for: payment_date, entry_date, updated_at
      - Procedure Dates:
        * Primary: procedure_date from paysplit/claimproc
        * Used for: procedure_date
      - AR Inclusion Logic:
        * include_in_ar = TRUE when payment_date <= CURRENT_DATE
        * Ensures future-dated payments are excluded from AR calculations

      Common Payment Allocation Scenarios:
      1. Standard Patient Payment:
         - Single procedure payment
         - Direct provider attribution
         - Immediate AR inclusion
         Example: $500 payment for a cleaning, paid by credit card

      2. Split Patient Payment:
         - Multiple procedures in one payment
         - Provider attribution via paysplit
         - Proportional allocation across procedures
         Example: $1000 payment split between two procedures with different providers

      3. Insurance Primary Payment:
         - Status 1 (Received) claim
         - Direct carrier payment
         - Full procedure coverage
         Example: $800 insurance payment for a crown procedure

      4. Insurance Supplemental Payment:
         - Status 3 (Supplemental) claim
         - Additional payment after initial claim
         - Partial coverage completion
         Example: $200 supplemental payment after initial $800 payment

      5. High Value Patient Payment:
         - Payment type 69 or 574
         - Requires merchant fee recording
         - Special monitoring for fraud prevention
         Example: $10,000 payment for full mouth reconstruction

      6. Refund Payment:
         - Payment type 72
         - Negative amount
         - Cannot be credit card completed
         Example: -$500 refund for overpayment

      7. Recurring Credit Card Payment:
         - is_recurring_cc_flag = true
         - Requires recurring_charge_date
         - Future-dated until processed
         Example: $200 monthly payment plan for orthodontics
      
      Data Sources:
      - stg_opendental__payment: Base patient payment information
      - stg_opendental__paysplit: Payment split information and procedure links
      - stg_opendental__claimpayment: Insurance payment details
      - stg_opendental__claimproc: Claim procedure information and provider assignments.
      - stg_opendental__procedurelog: Procedure information and provider assignments.
      - stg_opendental__definition: Payment type and status definitions
      
      Business rules:
      - Insurance claims are filtered to only include:
        * Status 1 (Received) or 3 (Supplemental) claims
        * Claims with a valid claim_payment_id (excludes claim_payment_id = 0)
      - Payment dates are used for AR calculations
      - Payment types and statuses are managed through the definition table
      - Payment allocations must be properly linked to procedures or claims
      - Provider assignments are sourced from:
        * stg_opendental__claimproc for insurance payments
        * stg_opendental__procedurelog for patient payments (via paysplit join)
      - Patient payment provider assignments are determined through:
        * Payment -> Paysplit -> Procedurelog join path
        * Ensures accurate provider attribution for split payments
      - Payment allocation IDs are generated using:
        * ROW_NUMBER() over payment_source_type and payment_id
        * Ensures unique identifiers across both payment types
    
    config:
      materialized: incremental
      unique_key: payment_allocation_id
      schema: intermediate
    
    columns:
      - name: payment_allocation_id
        description: |
          Unique identifier for each payment allocation record.
          Generated using ROW_NUMBER() over payment_source_type and payment_id
          to ensure uniqueness across both patient and insurance payments.
        tests:
          - unique
          - not_null

      - name: payment_source_type
        description: Type of payment source (PATIENT or INSURANCE)
        tests:
          - not_null
          - accepted_values:
              values: ['PATIENT', 'INSURANCE']

      - name: payment_id
        description: |
          Foreign key to either:
          - Patient payment (from stg_opendental__payment)
          - Insurance claim payment (from stg_opendental__claimpayment)
        tests:
          - not_null

      - name: patient_id
        description: Foreign key to the patient
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: provider_id
        description: |
          Foreign key to the provider, sourced through different paths based on payment type:
          - Insurance payments: Directly from stg_opendental__claimproc
          - Patient payments: From stg_opendental__procedurelog via stg_opendental__paysplit join
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id

      - name: procedure_id
        description: |
          Foreign key to the procedure, sourced through different paths based on payment type:
          - Insurance payments: From stg_opendental__claimproc
          - Patient payments: From stg_opendental__paysplit
        tests:
          - relationships:
              to: ref('stg_opendental__procedurelog')
              field: procedure_id

      - name: adjustment_id
        description: Foreign key to the adjustment
        tests:
          - relationships:
              to: ref('stg_opendental__adjustment')
              field: adjustment_id

      - name: split_amount
        description: Amount allocated in this payment
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -100000
              max_value: 100000

      - name: payment_date
        description: Date when the payment was made
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::date"
              max_value: "'{{ var('max_valid_date', 'current_date') }}'::date"

      - name: procedure_date
        description: |
          Date of the associated procedure, sourced through different paths based on payment type:
          - Insurance payments: From stg_opendental__claimproc
          - Patient payments: From stg_opendental__paysplit
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::date"
              max_value: "'{{ var('max_valid_date', 'current_date') }}'::date"

      - name: payment_type_id
        description: |
          Type of payment. Current patterns (2023-present):
          - 71: Most common type (8,335 payments), avg $293
          - 0: Administrative entries (1,110 payments), must be $0
          - 69: High value payments (965 payments)
              * Average: $1,036
              * Warning Tiers:
                - LOW: > $5,000
                - MEDIUM: > $10,000
                - HIGH: > $25,000
                - CRITICAL: > $50,000
          - 70: Regular payments (609 payments), avg $348
          - 391: High value (482 payments), avg $922
          - 412: Newer payment type (187 payments), avg $199
          - 72: Refunds (50 payments), always negative
          - 634: New type since Sept 2024 (16 payments), avg $6,009
          - 574: Very high value (6 payments), avg $26,071
          - 417: Special cases (6 payments), avg $2,967
          
          This field is also a foreign key to the definition table (category_id = 1) which contains
          the official payment type descriptions and metadata. The relationship ensures that all
          payment types used in the system are properly defined and maintained in a central location.
        tests:
          - not_null
          - accepted_values:
              values: [0, 69, 70, 71, 72, 391, 412, 417, 574, 634]
              config:
                severity: warn
          - relationships:
              to: ref('stg_opendental__definition')
              field: definition_id

      - name: payment_source
        description: Source of the payment
        tests:
          - not_null:
              where: "payment_source_type = 'PATIENT'"

      - name: payment_status
        description: Foreign key to the payment status definition
        tests:
          - not_null:
              where: "payment_source_type = 'PATIENT'"
          - relationships:
              to: ref('stg_opendental__definition')
              field: definition_id

      - name: process_status
        description: Foreign key to the process status definition
        tests:
          - not_null:
              where: "payment_source_type = 'PATIENT'"
          - relationships:
              to: ref('stg_opendental__definition')
              field: definition_id

      - name: merchant_fee
        description: Merchant fee associated with the payment
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1000
              where: "payment_source_type = 'PATIENT'"

      - name: payment_notes
        description: Additional notes about the payment

      - name: check_number
        description: Check number for the payment
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: bank_branch
        description: Bank branch information
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: created_by_user_id
        description: ID of the user who created the record
        tests:
          - relationships:
              to: ref('stg_opendental__user')
              field: user_id

      - name: entry_date
        description: Date when the record was entered
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::timestamp"
              max_value: "'{{ var('max_valid_date', 'current_date') }}'::timestamp"

      - name: updated_at
        description: Timestamp when the record was last updated
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::timestamp"
              max_value: "'{{ var('max_valid_date', 'current_date') }}'::timestamp"

      - name: deposit_id
        description: Foreign key to the deposit record
        tests:
          - relationships:
              to: ref('stg_opendental__deposit')
              field: deposit_id

      - name: external_id
        description: External system reference ID for the payment
        tests:
          - not_null:
              where: "payment_source_type = 'PATIENT'"

      - name: is_cc_completed_flag
        description: Flag indicating if credit card payment is completed
        tests:
          - accepted_values:
              values: [true, false]
              where: "payment_source_type = 'PATIENT'"

      - name: recurring_charge_date
        description: Next scheduled date for recurring payment
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::date"
              max_value: "'{{ var('max_valid_date', 'current_date') }}'::date"
              where: "payment_source_type = 'PATIENT'"

      - name: receipt_text
        description: Text content of the payment receipt
        tests:
          - not_null:
              where: "payment_source_type = 'PATIENT'"

      - name: carrier_name
        description: Name of the insurance carrier
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: is_partial
        description: Flag indicating if this is a partial insurance payment
        tests:
          - accepted_values:
              values: [true, false]
              where: "payment_source_type = 'INSURANCE'"

      - name: payment_group_id
        description: Group identifier for related payments
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: insurance_subscriber_id
        description: Foreign key to the insurance subscriber
        tests:
          - relationships:
              to: ref('stg_opendental__inssub')
              field: inssub_id
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: claim_id
        description: Foreign key to the insurance claim
        tests:
          - relationships:
              to: ref('stg_opendental__claim')
              field: claim_id
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: plan_id
        description: Foreign key to the insurance plan
        tests:
          - relationships:
              to: ref('stg_opendental__insplan')
              field: insurance_plan_id
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: deductible_applied
        description: Amount of deductible applied to this payment
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"

      - name: write_off
        description: Amount written off for this payment
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"

      - name: allowed_override
        description: Manual override for allowed amount
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"
              row_condition: "allowed_override != -1.0 and claim_id not in (21561)"

      - name: copay_amount
        description: Copay amount for this payment
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"
              row_condition: "copay_amount != -1.0"

      - name: paid_other_insurance
        description: Amount paid by other insurance
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"

      - name: base_estimate
        description: Base estimate before adjustments
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"

      - name: insurance_estimate_total
        description: Total estimate from insurance
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "payment_source_type = 'INSURANCE'"

      - name: status
        description: Status of the claim procedure
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"
          - accepted_values:
              values: [1, 3]
              where: "payment_source_type = 'INSURANCE'"

      - name: percentage
        description: Percentage of coverage for this procedure
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100
              where: "payment_source_type = 'INSURANCE'"

      - name: is_transfer
        description: Flag indicating if this is a transfer payment
        tests:
          - accepted_values:
              values: [true, false]
              where: "payment_source_type = 'INSURANCE'"

      - name: is_overpay
        description: Flag indicating if this is an overpayment
        tests:
          - accepted_values:
              values: [true, false]
              where: "payment_source_type = 'INSURANCE'"

      - name: remarks
        description: Additional remarks about the claim procedure
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: code_sent
        description: Procedure code sent to insurance
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: estimate_note
        description: Notes about the insurance estimate
        tests:
          - not_null:
              where: "payment_source_type = 'INSURANCE'"

      - name: payment_type_description
        description: |
          Human-readable description of the payment type from definition table.
          Current patterns (2023-present):
          - Standard Payment (type 71): Most common type, avg $293
          - Administrative (type 0): Must be $0
          - High Value Payment (type 69): 
              * Average: $1,036
              * Warning Tiers:
                - LOW: > $5,000
                - MEDIUM: > $10,000
                - HIGH: > $25,000
                - CRITICAL: > $50,000
          - Regular Payment (type 70): avg $348
          - High Value (type 391): avg $922
          - New Payment Type (type 412): avg $199
          - Refund (type 72): Always negative
          - New Type (type 634): avg $6,009
          - Very High Value (type 574): avg $26,071
          - Special Case (type 417): avg $2,967
        tests:
          - not_null
          - accepted_values:
              values: [
                'Standard Payment', 'Administrative', 'High Value Payment',
                'Regular Payment', 'High Value', 'New Payment Type', 'Refund',
                'New Type', 'Very High Value', 'Special Case', 'Insurance Check',
                'Electronic Payment', 'Insurance Credit', 'Unknown',
                'Unknown Insurance Payment'
              ]
              config:
                severity: warn
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name

      - name: payment_status_description
        description: |
          Human-readable description of the payment status from definition table.
          Current patterns:
          - Pending (status 0): Initial state
          - Completed (status 1): Successfully processed
          - Failed (status 2): Processing failed
          - Voided (status 3): Cancelled payment
        tests:
          - not_null
          - accepted_values:
              values: ['Pending', 'Completed', 'Failed', 'Voided', 'Unknown', 'N/A']
              config:
                severity: warn
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name

      - name: process_status_description
        description: |
          Human-readable description of the process status from definition table.
          Current patterns:
          - Not Processed (status 0): Initial state
          - Processing (status 1): Currently being processed
          - Processed (status 2): Successfully completed
          - Error (status 3): Processing error occurred
        tests:
          - not_null
          - accepted_values:
              values: ['Not Processed', 'Processing', 'Processed', 'Error', 'Unknown', 'N/A']
              config:
                severity: warn
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name

      - name: include_in_ar
        description: Flag indicating if this payment should be included in AR calculations
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: model_created_at
        description: |
          Timestamp when this model was created during ETL execution.
          This is used for monitoring ETL run times and data freshness, not for business data validation.
          The timestamp will reflect when the ETL job processed this record.
        tests:
          - not_null:
              config:
                severity: warn
                description: "Used for ETL monitoring and audit purposes only"

      - name: model_updated_at
        description: |
          Timestamp when this model was last updated during ETL execution.
          This is used for monitoring ETL run times and data freshness, not for business data validation.
          The timestamp will reflect when the ETL job last processed this record.
        tests:
          - not_null:
              config:
                severity: warn
                description: "Used for ETL monitoring and audit purposes only"

    tests:
      # Date range validation
      - dbt_utils.expression_is_true:
          expression: "payment_date >= '2023-01-01'"
          config:
            severity: warn

      # Payment amount validation based on payment type
      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              payment_source_type = 'PATIENT' AND
              (
                (payment_type_id = 0 AND split_amount != 0) OR
                (payment_type_id = 72 AND split_amount >= 0) OR
                (payment_type_id = 69 AND split_amount > 50000) OR
                (payment_type_id = 574 AND split_amount > 50000)
              )
            )
          config:
            severity: error
            description: "Payment amounts must match their type constraints"

      # Insurance payment validation
      - dbt_utils.expression_is_true:
          expression: "NOT (payment_source_type = 'INSURANCE' AND payment_id IS NULL)"
          config:
            severity: error
            description: "Insurance payments must have a valid claim_payment_id"

      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              payment_source_type = 'INSURANCE' AND
              (
                (status = 1 AND split_amount <= 0 AND 
                 NOT (
                   remarks ILIKE '%DENIED%' OR 
                   remarks ILIKE '%NOT COVER%' OR 
                   remarks ILIKE '%FREQ%' OR
                   (insurance_estimate_total = 0 AND base_estimate > 0)
                 )
                ) OR 
                (status = 3 AND split_amount > 0)
              )
            )
          config:
            severity: error
            description: "Insurance payment amounts must align with claim status, excluding denied claims and pre-authorizations"
            row_condition: "payment_date <= '{{ var('max_valid_date', 'current_date') }}'::date"

      # AR balance alignment with patient aging buckets
      - payment_balance_alignment:
          config:
            severity: error
            description: "Payment allocations must sum to match patient total balance"

      # Suggested additional tests:
      - dbt_utils.expression_is_true:
          expression: "NOT (payment_source_type = 'PATIENT' AND payment_date > CURRENT_DATE)"
          config:
            severity: error
            description: "Patient payments cannot have future dates"

      - dbt_utils.expression_is_true:
          expression: "NOT (payment_source_type = 'INSURANCE' AND carrier_name IS NULL)"
          config:
            severity: error
            description: "Insurance payments must have a carrier name"

      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              payment_source_type = 'PATIENT' AND
              payment_type_id = 72 AND
              is_cc_completed_flag = true
            )
          config:
            severity: error
            description: "Refund payments cannot be credit card completed"

      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              payment_source_type = 'PATIENT' AND
              is_cc_completed_flag = true AND
              recurring_charge_date IS NULL
            )
          config:
            severity: error
            description: "Recurring credit card payments must have a next charge date"

      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              payment_source_type = 'INSURANCE' AND
              is_partial = true AND
              payment_group_id IS NULL
            )
          config:
            severity: error
            description: "Partial insurance payments must have a payment group ID"

      - dbt_utils.expression_is_true:
          expression: >
            NOT (
              payment_source_type = 'PATIENT' AND
              payment_type_id IN (69, 574) AND
              merchant_fee IS NULL
            )
          config:
            severity: warn
            description: "High value payments should have merchant fees recorded"

      - dbt_utils.expression_is_true:
          expression: |
            CASE
              -- For status 1 (Received) claims:
              WHEN payment_source_type = 'INSURANCE' AND status = 1 THEN
                -- Must have a non-zero payment amount unless:
                -- 1. It's a denied claim (has remarks indicating denial)
                -- 2. It's a pre-authorization (future dated)
                -- 3. It's part of a payment group
                split_amount > 0
                OR (
                  split_amount = 0
                  AND (
                    -- Has explicit remarks about denial/non-payment
                    (remarks IS NOT NULL AND remarks != '')
                    -- OR is future dated (pre-auth)
                    OR COALESCE(insurance_finalized_date, claim_procedure_date) > CURRENT_DATE
                    -- OR is part of a payment group
                    OR payment_group_id != 0
                  )
                )
              -- For status 3 (Supplemental) claims:
              WHEN payment_source_type = 'INSURANCE' AND status = 3 THEN
                split_amount <= 0
              -- For all other records:
              ELSE TRUE
            END
          config:
            severity: error
            description: "Insurance payment amounts must align with claim status, excluding denied claims and pre-authorizations"

    meta:
      owner: "dental_finance_team"
      contains_pii: true
      business_process: "Payment Allocation & Reconciliation"
      refresh_frequency: "hourly"
      business_impact: "High"
      data_quality_requirements:
        - "All payment allocations must have a valid payment_id"
        - "Payment amounts must be positive unless explicitly marked as refunds"
        - "Payment dates must be within valid business date ranges"
        - "Insurance payments must be properly linked to claim procedures"
        - "Deposit IDs must be valid when present"
        - "Insurance subscriber IDs must be valid when present"
        - "Claim IDs must be valid when present"
        - "Plan IDs must be valid when present"
        - "Payment types and statuses must be valid definitions"
        - "Monitor high-value payments for potential fraud or errors"
        - "Insurance claims must have a valid claim_payment_id (excludes claim_payment_id = 0)" 