version: 2

models:
  - name: int_payment_split
    description: >
      Intermediate model focused on payment split categorization and validation.
      Part of System C: Payment Allocation & Reconciliation workflow.
      
      Data Sources:
      - stg_opendental__paysplit: Base split records and amounts
      - stg_opendental__definition: Split type definitions and categories
      - int_procedure_complete: Procedure details and fees
      - int_adjustments: Adjustment details and types
      
      Key features:
      - Categorizes splits by type (normal, discount, unearned)
      - Validates split business rules and allocations
      - Provides split impact analysis and amount categorization
      - Maintains relationships with procedures and adjustments
      - Tracks split validation status and metadata
      
      Business rules:
      - Splits must be properly allocated to procedures or adjustments
      - Zero amount splits must be valid (discounts, unearned revenue)
      - Unearned revenue splits must have a provider
      - Split amounts must be within reasonable ranges
    
    config:
      materialized: incremental
      unique_key: paysplit_id
      schema: intermediate
    
    columns:
      - name: paysplit_id
        description: Unique identifier for each payment split
        tests:
          - unique
          - not_null

      - name: payment_id
        description: Foreign key to the payment
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__payment')
              field: payment_id

      - name: patient_id
        description: Foreign key to the patient
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: clinic_id
        description: Foreign key to the clinic
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__clinic')
              field: clinic_id

      - name: provider_id
        description: Foreign key to the provider
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id

      - name: procedure_id
        description: Foreign key to the procedure
        tests:
          - relationships:
              to: ref('stg_opendental__procedurelog')
              field: procedure_id

      - name: adjustment_id
        description: Foreign key to the adjustment
        tests:
          - relationships:
              to: ref('stg_opendental__adjustment')
              field: adjustment_id

      - name: forward_split_id
        description: Reference to a forward split if this is a refund
        tests:
          - relationships:
              to: ref('stg_opendental__paysplit')
              field: paysplit_id

      - name: split_amount
        description: Amount of the split
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -100000
              max_value: 100000

      - name: payment_date
        description: Date when the payment was made
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "{{ var('max_valid_date', 'current_date') }}"

      - name: procedure_date
        description: Date of the associated procedure
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "{{ var('max_valid_date', 'current_date') }}"

      - name: is_discount_flag
        description: Flag indicating if this is a discount split
        tests:
          - accepted_values:
              values: [true, false]

      - name: discount_type
        description: Type of discount if applicable
        tests:
          - accepted_values:
              values: ['PROMPT_PAY', 'SENIOR', 'STAFF', 'OTHER', null]

      - name: unearned_type
        description: Type of unearned revenue if applicable
        tests:
          - accepted_values:
              values: [288, 439, null]

      - name: entry_date
        description: Date when the record was entered
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "{{ var('max_valid_date', 'current_date') }}"

      - name: updated_at
        description: Timestamp when the record was last updated
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "{{ var('max_valid_date', 'current_date') }}"

      - name: created_by_user_id
        description: ID of the user who created the record
        tests:
          - relationships:
              to: ref('stg_opendental__user')
              field: user_id

      - name: procedure_code
        description: Code of the associated procedure
        tests:
          - not_null:
              where: "procedure_id IS NOT NULL"

      - name: procedure_description
        description: Description of the associated procedure
        tests:
          - not_null:
              where: "procedure_id IS NOT NULL"

      - name: procedure_fee
        description: Fee for the associated procedure
        tests:
          - not_null:
              where: "procedure_id IS NOT NULL"
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              where: "procedure_id IS NOT NULL"

      - name: adjustment_amount
        description: Amount of the associated adjustment
        tests:
          - not_null:
              where: "adjustment_id IS NOT NULL"
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -10000
              max_value: 10000
              where: "adjustment_id IS NOT NULL"

      - name: adjustment_type_name
        description: Name of the adjustment type
        tests:
          - not_null:
              where: "adjustment_id IS NOT NULL"

      - name: adjustment_category_type
        description: Category of the adjustment type
        tests:
          - not_null:
              where: "adjustment_id IS NOT NULL"

      - name: split_type
        description: Categorization of the split
        tests:
          - not_null
          - accepted_values:
              values: ['NORMAL_PAYMENT', 'DISCOUNT', 'UNEARNED_REVENUE', 'TREATMENT_PLAN_PREPAYMENT']

      - name: is_valid_zero_amount
        description: Flag indicating if a zero amount split is valid
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_valid_unearned_type
        description: Flag indicating if unearned type assignment is valid
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_valid_allocation
        description: Flag indicating if the split is properly allocated
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: split_impact
        description: Classification of the split's impact on the procedure fee
        tests:
          - not_null
          - accepted_values:
              values: ['major', 'moderate', 'minor']

      - name: amount_category
        description: Categorization of the split amount
        tests:
          - not_null
          - accepted_values:
              values: ['REFUND', 'ZERO', 'SMALL', 'MEDIUM', 'LARGE', 'VERY_LARGE']

      - name: model_created_at
        description: Timestamp when this model was created
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "{{ var('max_valid_date', 'current_date') }}"

      - name: model_updated_at
        description: Timestamp when this model was last updated
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "{{ var('max_valid_date', 'current_date') }}"

    tests:
      # Zero amount validation
      - dbt_utils.expression_is_true:
          expression: "NOT (split_amount = 0 AND NOT is_valid_zero_amount)"
          config:
            severity: error
            description: "Zero amount splits must be valid"

      # Unearned revenue validation
      - dbt_utils.expression_is_true:
          expression: "NOT (unearned_type IN (288, 439) AND NOT is_valid_unearned_type)"
          config:
            severity: error
            description: "Unearned revenue splits must have a provider"

      # Allocation validation
      - dbt_utils.expression_is_true:
          expression: "NOT (NOT is_valid_allocation)"
          config:
            severity: error
            description: "Splits must be properly allocated"

      # Split amount validation
      - dbt_utils.expression_is_true:
          expression: "NOT (ABS(split_amount) > 100000)"
          config:
            severity: error
            description: "Split amounts must be within reasonable ranges"

    meta:
      owner: "dental_finance_team"
      contains_pii: true
      business_process: "Payment Allocation & Reconciliation"
      refresh_frequency: "hourly"
      business_impact: "High"
      data_quality_requirements:
        - "All splits must have a valid payment_id"
        - "Split amounts must be within reasonable ranges"
        - "Zero amount splits must be valid"
        - "Unearned revenue splits must have a provider"
        - "Splits must be properly allocated to procedures or adjustments"
        - "Split dates must be within valid business date ranges"
        - "Split types must be valid"
        - "Split impact must be properly calculated"
        - "Amount categories must be properly assigned"
