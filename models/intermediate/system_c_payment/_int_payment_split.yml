version: 2

models:
  - name: int_payment_split
    description: >
      Intermediate model focused on payment split categorization and validation.
      Part of System C: Payment Allocation & Reconciliation workflow.
      
      Data Sources:
      - stg_opendental__paysplit: Base split records and amounts
      - stg_opendental__definition: Split type definitions and categories
      - int_procedure_complete: Procedure details and fees
      - int_adjustments: Adjustment details and types
      
      Key features:
      - Categorizes splits by type (normal, discount, unearned)
      - Validates split business rules and allocations
      - Provides split impact analysis and amount categorization
      - Maintains relationships with procedures and adjustments
      - Tracks split validation status and metadata
      - Handles high-split administrative entries (100+ splits)
      - Supports hidden splits and prepayment tracking
      
      Discount Handling:
      - Combines discount information from multiple sources:
        1. Procedure-level discounts (procedurelog.Discount)
        2. Adjustment-level discounts (adjustment.AdjType and AdjAmt)
      - Provides unified discount tracking through combined_discount_amount
      - Supports detailed discount categorization and analysis
      
      Note: The paysplit.IsDiscount and DiscountType fields are unused and always 0.
      Discount tracking is handled entirely through procedure and adjustment tables.
      
      Split Categories:
      1. Regular Payment Splits:
         - Visible on account
         - Attached to completed procedures/adjustments
         - Immediate impact on patient balance
         - Rigorous validation on procedure attachments
      
      2. Hidden Payment Splits:
         - Not shown on account or statements
         - Used for prepayments and treatment planning
         - Tracked in separate Account Module tab
         - Automatically transfer when procedures complete
         - Generate income transfers on status changes
      
      3. Unearned/Prepayment Splits:
         - Track deferred income
         - Must have valid unearned type (288, 439)
         - Require provider assignment
         - Can be hidden from account view
         - Common for payment plans and future procedures
      
      Split Patterns:
      - Most payments have 1-2 splits (median = 2)
      - Some administrative entries (payment_type_id = 0) can have hundreds of splits
      - High-split patterns (100+ splits) are typically:
        * Administrative/batch operations
        * Treatment plan allocations
        * System-generated entries
        * Characterized by payment_amount = 0.0
        * Recent dates (typically within current month)
      
      Common Split Amounts:
      - Most frequent: $31.00, $60.00, $109.00
      - Common refund amounts: -$29.00, -$53.00, -$30.00
      - Small amounts (<$10) often represent adjustments or fees
      
      Payment Breakdown Tracking:
      - Fee amounts and procedure links
      - Write-offs and adjustments
      - Insurance payments and estimates
      - Patient payment allocations
      - Remaining balances
      - Overpayment warnings
      
      Business rules:
      - Splits must be properly allocated to procedures or adjustments
      - Zero amount splits must be valid (discounts, unearned revenue)
      - Unearned revenue splits must have a provider
      - Split amounts must be within reasonable ranges
      - High-split administrative entries require special validation
      - Payment type 0 entries need additional verification
      - Clinic and Provider inherit from attached procedures/adjustments
      - Rigorous validation when attached to procedures
      - Prevents overpayment with warnings
      - Hidden splits must have appropriate unearned type flags
      - Income transfers track movement between visible/hidden status
    
    config:
      materialized: incremental
      unique_key: paysplit_id
      schema: intermediate
    
    columns:
      - name: paysplit_id
        description: Unique identifier for each payment split
        tests:
          - unique
          - not_null

      - name: payment_id
        description: |
          Foreign key to the payment.
          Note: Some administrative payments (type 0) can have hundreds of splits.
          For hidden splits, tracks the original payment that was prepaid.
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__payment')
              field: payment_id

      - name: patient_id
        description: |
          Foreign key to the patient.
          Can be from different family if "Is from another family" is checked.
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: clinic_id
        description: |
          Foreign key to the clinic.
          Inherits from procedure/adjustment if attached, otherwise from payment preferences.
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__clinic')
              field: clinic_id

      - name: provider_id
        description: |
          Foreign key to the provider.
          Required for unearned types.
          Inherits from procedure/adjustment if attached.
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id
              where: "payment_date >= '2023-01-01'::date AND provider_id > 0"
              config:
                severity: warn
                description: "Non-zero provider ID must exist in stg_opendental__provider when payment date is after 2023-01-01. Note: Unearned revenue splits (unearned_type = 288) require a provider assignment."

      - name: procedure_id
        description: |
          Foreign key to the procedure.
          Can link to completed or treatment planned procedures.
          Detached when hidden splits transfer to visible.
        tests:
          - relationships:
              to: ref('stg_opendental__procedurelog')
              field: procedure_id
              where: "payment_date >= '2023-01-01'::date AND procedure_id > 0 AND procedure_date IS NOT NULL"
              config:
                severity: error
                description: "Non-zero procedure ID must exist in stg_opendental__procedurelog when payment date is after 2023-01-01 and procedure has been completed"

      - name: adjustment_id
        description: |
          Foreign key to the adjustment.
          Cannot be attached if procedure_id exists.
          Used for tracking non-procedure payment allocations.
        tests:
          - relationships:
              to: ref('stg_opendental__adjustment')
              field: adjustment_id
              where: "payment_date >= '2023-01-01'::date AND adjustment_id > 0 AND adjustment_amount IS NOT NULL"
              config:
                severity: error
                description: "Non-zero adjustment ID must exist in stg_opendental__adjustment when payment date is after 2023-01-01 and adjustment has been processed"

      - name: forward_split_id
        description: |
          Legacy field for tracking payment split references. Currently unused in the system.
        tests:
          - dbt_utils.expression_is_true:
              column_name: "forward_split_id"
              expression: "= 0"
              config:
                severity: warn
                description: "Field is currently unused, 0 is the expected value"

      - name: split_amount
        description: |
          Amount of the split.
          Common patterns:
          - Most frequent: $31.00, $60.00, $109.00
          - Common refunds: -$29.00, -$53.00, -$30.00
          - Small amounts (<$10) often represent adjustments
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -100000
              max_value: 100000

      - name: payment_date
        description: Date when the payment was made
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "between '2023-01-01'::date and '{{ var('max_valid_date') }}'::date"
              config:
                severity: error
                description: "Payment date must be between 2023-01-01 and max_valid_date"

      - name: procedure_date
        description: Date of the associated procedure
        tests:
          - dbt_utils.expression_is_true:
              expression: "between '2023-01-01'::date and '{{ var('max_valid_date') }}'::date"
              config:
                severity: error
                description: "Procedure date must be between 2023-01-01 and max_valid_date"

      - name: is_discount_flag
        description: |
          Boolean flag indicating if this split represents a discount.
          Note: This field is unused in the source system and is always false.
          For actual discount information, refer to combined_discount_amount and discount_category.
        tests:
          - dbt_utils.expression_is_true:
              expression: "= false"
              column_name: "is_discount_flag"
              config:
                severity: warn
                description: "Field is currently unused, false is the expected value"

      - name: discount_type
        description: |
          Type of discount if this split represents a discount.
          Note: This field is unused in the source system and is always 0.
          For actual discount types, refer to discount_category and discount_source_type.
        tests:
          - dbt_utils.expression_is_true:
              expression: "= 0"
              column_name: "discount_type"
              config:
                severity: warn
                description: "Field is currently unused, 0 is the expected value"

      - name: combined_discount_amount
        description: |
          Total discount amount combining both procedure-level and adjustment-level discounts.
          Calculated as:
          - Procedure discount (if procedure_id exists)
          - Plus adjustment amount (if adjustment_id exists and AdjType indicates a discount)
          
          Common patterns:
          - Procedure discounts: Typically for higher-value procedures (avg $1,110)
          - Adjustment discounts: Used for highest-value procedures (avg $2,945)
          - Combined discounts: When both sources apply to the same procedure
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -100000
              max_value: 100000

      - name: discount_category
        description: |
          Categorization of the discount based on both procedure and adjustment sources.
          Values:
          - 'PROCEDURE_DISCOUNT': Discount from procedurelog.Discount
          - 'ADJUSTMENT_DISCOUNT': Discount from adjustment.AdjType
          - 'COMBINED_DISCOUNT': Both procedure and adjustment discounts
          - 'NO_DISCOUNT': No discounts applied
          
          Common adjustment types for discounts:
          - 186: Senior discount
          - 472, 474, 475: Provider discounts
          - 486: Family discount
          - 9: Cash discount
        tests:
          - accepted_values:
              values: ['PROCEDURE_DISCOUNT', 'ADJUSTMENT_DISCOUNT', 'COMBINED_DISCOUNT', 'NO_DISCOUNT']

      - name: discount_source_type
        description: |
          Specific type of discount based on adjustment type or procedure discount.
          Values:
          - 'SENIOR': Senior discount (AdjType 186)
          - 'PROVIDER': Provider discount (AdjType 472, 474, 475)
          - 'FAMILY': Family discount (AdjType 486)
          - 'CASH': Cash discount (AdjType 9)
          - 'PROCEDURE': Procedure-level discount
          - 'COMBINED': Multiple discount types
          - null: No discount
        tests:
          - accepted_values:
              values: ['SENIOR', 'PROVIDER', 'FAMILY', 'CASH', 'PROCEDURE', 'COMBINED', null]

      - name: unearned_type
        description: Type of unearned revenue if applicable
        tests:
          - accepted_values:
              values: [0, 288, 439]
              where: "unearned_type is not null"
              config:
                severity: error
                description: "Non-null unearned type must be 0 (normal payment), 288 (unearned revenue), or 439 (treatment plan)"
          - not_null:
              where: "unearned_type is not null"
              config:
                severity: error
                description: "Unearned type must be NULL, 0 (normal payment), 288 (unearned revenue), or 439 (treatment plan)"

      - name: entry_date
        description: Date when the record was entered
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'::date"
              max_value: "current_date"
              config:
                severity: error
                description: "Entry date must be between 2023-01-01 and current date"

      - name: updated_at
        description: Timestamp when the record was last updated
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "between '2023-01-01'::timestamp and current_timestamp"
              config:
                severity: error
                description: "Updated timestamp must be between 2023-01-01 and current timestamp"

      - name: created_by_user_id
        description: ID of the user who created the record
        tests:
          - relationships:
              to: ref('stg_opendental__user')
              field: user_id

      - name: procedure_code
        description: Code of the associated procedure
        tests:
          - not_null:
              where: "procedure_id IS NOT NULL AND procedure_code IS NOT NULL"
              config:
                severity: error
                description: "Procedure code must be present when procedure_id exists and we have the procedure information"

      - name: procedure_description
        description: Description of the associated procedure
        tests:
          - not_null:
              where: "procedure_id IS NOT NULL AND procedure_description IS NOT NULL"
              config:
                severity: error
                description: "Procedure description must be present when procedure_id exists and we have the procedure information"

      - name: procedure_fee
        description: Fee for the associated procedure
        tests:
          - not_null:
              where: "procedure_id IS NOT NULL AND procedure_fee IS NOT NULL"
              config:
                severity: error
                description: "Procedure fee must be present when procedure_id exists and we have the procedure information"
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100000
              where: "procedure_id IS NOT NULL AND procedure_fee IS NOT NULL"
              config:
                severity: error
                description: "Procedure fee must be between 0 and 100,000 when procedure_id exists and we have the procedure information"

      - name: adjustment_amount
        description: Amount of the associated adjustment
        tests:
          - not_null:
              where: "adjustment_id > 0 AND payment_date >= '2023-01-01'::date AND adjustment_amount IS NOT NULL"
              config:
                severity: error
                description: "Adjustment amount must be present when adjustment_id exists and payment date is after 2023-01-01"
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -10000
              max_value: 10000
              where: "adjustment_id > 0 AND payment_date >= '2023-01-01'::date AND adjustment_amount IS NOT NULL"
              config:
                severity: error
                description: "Adjustment amount must be between -10,000 and 10,000 when adjustment_id exists and payment date is after 2023-01-01"

      - name: adjustment_type_name
        description: Name of the adjustment type
        tests:
          - not_null:
              where: "adjustment_id IS NOT NULL AND adjustment_type_name IS NOT NULL"
              config:
                severity: error
                description: "Adjustment type name must be present when adjustment_id exists and we have the type information"

      - name: adjustment_category_type
        description: Category of the adjustment type
        tests:
          - not_null:
              where: "adjustment_id IS NOT NULL AND adjustment_category_type IS NOT NULL"
              config:
                severity: error
                description: "Adjustment category type must be present when adjustment_id exists and we have the category information"

      - name: split_type
        description: Categorization of the split
        tests:
          - not_null
          - accepted_values:
              values: ['NORMAL_PAYMENT', 'DISCOUNT', 'UNEARNED_REVENUE', 'TREATMENT_PLAN_PREPAYMENT']

      - name: is_valid_zero_amount
        description: Flag indicating if a zero amount split is valid
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_valid_unearned_type
        description: Flag indicating if unearned type assignment is valid
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: is_valid_allocation
        description: Flag indicating if the split is properly allocated
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: split_impact
        description: Classification of the split's impact on the procedure fee
        tests:
          - not_null
          - accepted_values:
              values: ['major', 'moderate', 'minor']

      - name: amount_category
        description: Categorization of the split amount
        tests:
          - not_null
          - accepted_values:
              values: ['REFUND', 'ZERO', 'SMALL', 'MEDIUM', 'LARGE', 'VERY_LARGE']

      - name: model_created_at
        description: Timestamp when this model was created
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "between '2023-01-01'::timestamp and current_timestamp"
              config:
                severity: error
                description: "Model created timestamp must be after 2023-01-01 and not in the future"

      - name: model_updated_at
        description: Timestamp when this model was last updated
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "between '2023-01-01'::timestamp and current_timestamp"
              config:
                severity: error
                description: "Model updated timestamp must be after 2023-01-01 and not in the future"

    tests:
      # Zero amount validation
      - dbt_utils.expression_is_true:
          expression: "NOT (split_amount = 0 AND NOT is_valid_zero_amount)"
          config:
            severity: error
            description: "Zero amount splits must be valid"

      # Unearned revenue validation
      - dbt_utils.expression_is_true:
          expression: "NOT (unearned_type IN (288, 439) AND NOT is_valid_unearned_type)"
          config:
            severity: error
            description: "Unearned revenue splits must have a provider"

      # Allocation validation
      - dbt_utils.expression_is_true:
          expression: "NOT (NOT is_valid_allocation)"
          config:
            severity: error
            description: "Splits must be properly allocated"

      # Split amount validation
      - dbt_utils.expression_is_true:
          expression: "NOT (ABS(split_amount) > 100000)"
          config:
            severity: error
            description: "Split amounts must be within reasonable ranges"

    meta:
      owner: "dental_finance_team"
      contains_pii: true
      business_process: "Payment Allocation & Reconciliation"
      refresh_frequency: "hourly"
      business_impact: "High"
      data_quality_requirements:
        - "All splits must have a valid payment_id"
        - "Split amounts must be within reasonable ranges"
        - "Zero amount splits must be valid"
        - "Unearned revenue splits must have a provider"
        - "Splits must be properly allocated to procedures or adjustments"
        - "Split dates must be within valid business date ranges"
        - "Split types must be valid"
        - "Split impact must be properly calculated"
        - "Amount categories must be properly assigned"
        - "High-split administrative entries must be properly validated"
        - "Payment type 0 entries require additional verification"
        - "Hidden splits must have appropriate unearned type flags"
        - "Income transfers must be tracked for hidden/visible status changes"
        - "Clinic and provider inheritance rules must be followed"
        - "Overpayment warnings must be generated appropriately"
