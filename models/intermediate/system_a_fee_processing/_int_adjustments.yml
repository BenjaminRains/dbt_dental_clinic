version: 2

models: 
  - name: int_adjustments
    description: >
      Financial adjustments applied to dental procedures, providing comprehensive fee adjustment tracking and analysis.
      
      This model serves as the central hub for all adjustment activity and provides detailed categorization, impact analysis, and financial reconciliation.
      Part of System A: Fee Processing & Verification workflow.
      
      Key Features:
      - Business categorization: Maps 40+ adjustment types to 13 standardized categories for reporting
      - Note-based intelligence: Extracts business context from free-text adjustment notes
      - Financial impact analysis: Calculates adjustment size and impact on procedure revenue
      - Discount management: Tracks employee, family, senior, military, and provider discounts
      - Unearned income integration: Links adjustments to prepayment and credit tracking
      
      Data Sources:
      - stg_opendental__adjustment: Base adjustment records with standardized fields
      - stg_opendental__definition: Adjustment type definitions and categorization rules
      - stg_opendental__paysplit: Unearned income type detection for prepayment tracking
      - int_procedure_complete: Procedure details, fees, and standard pricing
      
      Business Logic Features:
      - Enhanced categorization: 13 business categories (insurance_writeoff, provider_discount, senior_discount, etc.)
      - Intelligent note parsing: Identifies no-charge, courtesy, military, and provider discretion patterns
      - Size classification: Large (≥$1,000), medium (≥$500), small (≥$100), minimal (<$100)
      - Impact assessment: Major (>50% of fee), moderate (>10%), minor (≤10%)
      
      Financial Calculations:
      - Adjusted fee: procedure_fee + adjustment_amount (validated as non-negative)
      - Adjustment percentage: abs(adjustment_amount) / procedure_fee for impact analysis
      - Amount thresholds: Different limits based on procedure fee ranges and adjustment types
      
      Data Quality Notes:
      - Zero-fee procedures: Some procedures (D2919, 00040, N4102) have $0 fees but non-zero adjustments
      - Large discounts: Provider discounts can exceed $20,000 on high-value procedures
      - Missing procedures: Some adjustments lack procedure context (orphaned adjustments)
      - Historical data: References to archived procedures generate warnings, not errors
      
      Business Rules:
      - Zero-fee procedures must have zero adjustments (enforced with exceptions)
      - Adjustments limited to 2x procedure fee for data integrity
      - Unearned income types 288 and 439 tracked separately
      - Provider discretion identified through type codes (474, 475) and note patterns
    
    config:
      materialized: table
      schema: intermediate
      unique_key: adjustment_id
    
    columns:
      - name: adjustment_id
        description: >
          Primary key - Unique identifier for each adjustment record (maps from "AdjNum" in OpenDental)
          
          Source Transformation:
          - OpenDental source: "AdjNum" (CamelCase)
          - Transformed to: adjustment_id (snake_case with _id suffix)
          - Transformation rule: All columns ending in "Num" become "_id" fields
          
          Business Context:
          - Ensures each adjustment is uniquely trackable for audit purposes
          - Used for linking adjustments to payments, procedures, and reporting
        tests:
          - unique
          - not_null
          - relationships:
              to: ref('stg_opendental__adjustment')
              field: adjustment_id

      - name: patient_id
        description: >
          Foreign key to patient receiving the adjustment (maps from "PatNum" in OpenDental)
          
          Source Transformation:
          - OpenDental source: "PatNum" (CamelCase as stored)
          - Transformed to: patient_id (snake_case per naming conventions)
          
          Business Relationship:
          - One-to-many: Each patient can have multiple adjustments
          - Critical for patient account reconciliation and AR tracking
          - Used in financial statements and collection workflows
          
          Data Quality Considerations:
          - Always populated (required field in OpenDental)
          - No orphaned patient references expected
          - Referential integrity enforced at application level
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: procedure_id
        description: >
          Foreign key to procedure.
          
          Note: Some adjustments may reference historical or archived procedures that are no longer in the system.
          These records are flagged with a warning rather than an error to allow for historical data analysis.
        tests:
          - relationships:
              to: ref('int_procedure_complete')
              field: procedure_id
              config:
                severity: warn

      - name: provider_id
        description: Provider who authorized the adjustment
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id

      - name: clinic_id
        description: Clinic where adjustment was made
        tests: [] # MDC clinic only. No need to test.

      - name: adjustment_amount
        description: >
          Financial amount of the adjustment in USD (positive increases patient balance, negative decreases)
          
          Financial Context:
          - Currency: USD with 2 decimal precision
          - Calculation: Direct entry or percentage-based discounts
          - Business Rules: Validated against procedure fee ranges
          
          Accounting Impact:
          - Negative amounts reduce revenue (discounts, write-offs)
          - Positive amounts increase patient responsibility (corrections)
          - Flows directly to AR aging and financial statements
          
          Common Values:
          - Provider discounts: -$100 to -$5,000 (larger for complex procedures)
          - Senior/cash discounts: -$25 to -$500 (typically percentage-based)
          - Write-offs: Can exceed -$20,000 for implant cases
        tests:
          - not_null:
              config:
                description: "Financial integrity - all adjustments must have an amount"

      - name: adjustment_date
        description: Date when adjustment was applied
        tests:
          - not_null

      - name: procedure_date
        description: Date of the associated procedure
        tests:
          - not_null

      - name: adjustment_category
        description: >
          Business categorization of adjustment for reporting and analysis
          
          Valid Values:
          - 'insurance_writeoff': Insurance-related write-offs (type 188)
          - 'provider_discount': Provider-authorized discounts (types 474, 475, 601)
          - 'senior_discount': Age-based discount program (type 186)
          - 'cash_discount': Payment method incentive (types 9, 185)
          - 'employee_discount': Staff benefit program (types 472, 485, 655)
          - 'unearned_income': Prepayment or credit allocation (via paysplit)
          - 'other': Uncategorized adjustments
          
          Business Rules:
          - Primary categorization for financial reporting
          - Drives discount analysis and revenue impact calculations
          - Used in provider productivity metrics
          
          Operational Impact:
          - Determines GL account mapping for accounting
          - Influences collection strategy for patient accounts
          - Tracked in provider compensation calculations
        tests:
          - not_null

      - name: adjustment_size
        description: Size classification of the adjustment
        tests:
          - not_null

      - name: adjustment_type_name
        description: >
          Human-readable name of the adjustment type from the definitions table.
          This is the raw name from OpenDental's definition table and may contain
          provider-specific or system-specific terminology.
          Example: 'Discount Per Dr. Kamp', '5% Senior Discount', 'Patient Refund Check'
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name
              config:
                severity: warn

      - name: adjustment_type_value
        description: >
          Value associated with the adjustment type from the definitions table.
          This is the raw value field from OpenDental's definition table and may contain
          additional context or instructions for the adjustment type.
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_value
              config:
                severity: warn

      - name: adjustment_category_type
        description: >
          Numeric category ID from the definitions table indicating the type of adjustment.
          This maps to OpenDental's category system:
          - Category 0: Core adjustment types (Adjustment, Discount, Insurance Payment)
          - Category 1: Specific adjustment reasons
          - Category 15: Discount types
          - Category 29: Payment plan types
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: category_id
              config:
                severity: warn

      - name: procedure_code
        description: ADA procedure code from linked procedure
        tests: []

      - name: procedure_description
        description: Description of the linked procedure

      - name: procedure_fee
        description: >
          Original fee amount before adjustment.
          
          # Test: Model-level expression_is_true validates these ranges:
          # - For implant procedures (D6114, D6115): 0 to 30,000
          # - For all other procedures: 0 to 10,000
        tests: []

      - name: fee_schedule_id
        description: ID of the fee schedule used

      - name: standard_fee
        description: Standard fee amount from fee schedule
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              severity: warn

      - name: adjusted_fee
        description: >
          Final fee amount after adjustment (procedure_fee + adjustment_amount).
          
          # Test: Model-level expression_is_true ensures non-negative values
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              severity: warn

      # Removed duplicate adjustment_impact definition

      - name: is_procedure_adjustment
        description: Flag indicating if adjustment is tied to a specific procedure
        tests:
          - not_null

      - name: is_retroactive_adjustment
        description: Flag indicating if adjustment was applied after the procedure date
        tests:
          - not_null

      - name: is_provider_discretion
        description: >
          Flag indicating if adjustment was authorized at provider's discretion (converted from OpenDental patterns)
          
          Source Transformation:
          - OpenDental source: Derived from AdjType and AdjNote patterns
          - Transformation: Uses business logic to identify discretionary adjustments
          - Result: PostgreSQL boolean (true/false)
          
          Business Logic:
          - true when: AdjType in (474, 475) or note contains 'per dr', 'dr.'
          - false when: Standard discount types or insurance adjustments
          - null when: Never null (defaulted to false)
          
          Operational Usage:
          - Tracked for provider productivity analysis
          - Monitored for discount authorization patterns
          - Used in financial variance reporting
        tests:
          - not_null

      - name: is_employee_discount
        description: Flag indicating if adjustment is an employee discount
        tests:
          - not_null

      - name: is_military_discount
        description: Flag indicating if adjustment is a military discount
        tests:
          - not_null

      - name: is_courtesy_adjustment
        description: Flag indicating if adjustment is a courtesy adjustment
        tests:
          - not_null

      - name: adjustment_impact
        description: >
          Classification of adjustment's financial impact relative to procedure fee
          
          Calculation Method:
          - Numerator: Absolute value of adjustment amount
          - Denominator: Original procedure fee
          - Formula: abs(adjustment_amount) / nullif(procedure_fee, 0)
          
          Business Significance:
          - Target Range: Minor adjustments preferred (<10% of fee)
          - Benchmark: Major adjustments (>50%) require review
          - Decision Impact: Drives approval workflows and audit selection
          
          Data Quality:
          - Accuracy: Dependent on accurate procedure fee data
          - Timeliness: Calculated in real-time during transformation
          - Completeness: NULL when procedure fee is zero or missing
        tests:
          - accepted_values:
              values: ['major', 'moderate', 'minor']
              config:
                description: "Business rule - adjustment impact must be classified"
      
      # Additional business logic fields migrated from staging
      - name: adjustment_note
        description: Freetext note describing the adjustment (from staging layer)

      - name: entry_date
        description: Date when the adjustment was entered into the system (from staging layer)

      - name: statement_id
        description: Foreign key to billing statement (from staging layer)

      - name: tax_transaction_id
        description: Foreign key to tax transaction (from staging layer)

      - name: adjustment_direction
        description: >
          Basic categorization of adjustment amount direction.
          Values: 'positive', 'negative', 'zero' (from staging layer)
        tests:
          - accepted_values:
              values: ['positive', 'negative', 'zero']

      - name: is_no_charge
        description: >
          Flag indicating if adjustment note contains no-charge indicators.
          Detected via patterns: 'n/c', 'nc ', 'no charge'
        tests:
          - not_null

      - name: is_family_discount
        description: >
          Flag indicating if adjustment is a family member discount.
          Based on adjustment types: 482, 486
        tests:
          - not_null

      - name: is_large_adjustment
        description: >
          Flag for financially significant adjustments.
          true = adjustment types 486, 474 with amount < -1000
        tests:
          - not_null

      - name: is_minor_adjustment
        description: >
          Flag for small adjustments.
          true = adjustment types 186, 9 with amount > -50
        tests:
          - not_null

      - name: is_unearned_income
        description: >
          Flag indicating if adjustment is related to unearned income.
          Based on adjustment types: 288, 439
        tests:
          - not_null

      - name: unearned_type_id
        description: >
          Specific unearned income type ID from paysplit lookup.
          Values: 288, 439, or NULL if not unearned income

      # Metadata fields (from staging layer)
      - name: _extracted_at
        description: >
          ETL pipeline extraction timestamp - when the record was extracted from the source system
          
          Source: ETL pipeline metadata (added during extraction process)
          Purpose: Data lineage tracking and pipeline monitoring
          Usage: ETL debugging and data freshness validation
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2020-01-01 00:00:00'::timestamp"
              max_value: "current_timestamp"
      
      - name: _created_at
        description: >
          Original creation timestamp from OpenDental source system
          
          Source Transformation:
          - OpenDental source: "SecDateEntry" (CamelCase as stored)
          - Represents: When the adjustment was originally created in OpenDental
          - Usage: Business timeline analysis and audit trail tracking
        tests:
          - not_null
      
      - name: _updated_at
        description: >
          Last update timestamp from OpenDental source system
          
          Source Transformation:
          - OpenDental source: COALESCE("SecDateTEdit", "SecDateEntry")
          - Logic: Uses SecDateTEdit if available, falls back to SecDateEntry
          - Purpose: Change tracking and incremental loading
        tests:
          - not_null

      - name: _transformed_at
        description: >
          dbt model processing timestamp - when this intermediate model was last run
          
          Source: current_timestamp at dbt model execution
          Purpose: Model execution tracking and debugging
          Usage: Understanding data processing timeline
        tests:
          - not_null
      
      - name: _created_by_user_id
        description: >
          User who created the adjustment in OpenDental
          
          System Purpose:
          - Function: Audit trail for adjustment authorization
          - Audit Trail: Tracks which user initiated financial adjustments
          - Security: Supports authorization and approval workflows
          
          Data Governance:
          - Source: OpenDental security system
          - Update Frequency: Set once at creation, never updated
          - Retention: Permanent for audit compliance
          
          Operational Impact:
          - Performance: Indexed for audit queries
          - Integration: Links to user permission system
          - Monitoring: Used in authorization exception reports

    tests:
      # Performance monitoring
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 1000
          max_value: 50000
          config:
            severity: warn
            description: >
              Performance Monitor: Adjustment volume tracking
              
              Baseline: 1,000-50,000 adjustments expected
              Alert Threshold: Outside range may indicate data issues
              Action Required: Investigate ETL pipeline if outside range

      # Financial integrity tests
      - dbt_expectations.expression_is_true:
          expression: "adjusted_fee >= 0"
          config:
            severity: error
            description: >
              Financial Integrity: Adjusted fees cannot be negative
              
              Accounting Requirement: No negative procedure fees allowed
              Audit Significance: Negative fees would corrupt revenue reporting
              Business Impact: Ensures accurate financial statements

      # Business rule validation
      - dbt_expectations.expression_is_true:
          expression: "adjustment_date >= procedure_date"
          config:
            severity: warn
            description: >
              Business Rule: Adjustments typically occur after procedures
              
              Requirement: Chronological integrity for most adjustments
              Impact: Pre-procedure adjustments may indicate data issues
              Enforcement: Warning allows for valid pre-authorizations

      # Data quality monitoring
      - dbt_expectations.expression_is_true:
          expression: "abs(adjustment_amount) <= procedure_fee * 2"
          config:
            severity: warn
            description: >
              Data Quality Monitor: Adjustment reasonableness check
              
              Expectation: Adjustments within 200% of procedure fee
              Tolerance: Allows for large write-offs on complex cases
              Action Required: Review adjustments exceeding threshold

      # Referential integrity
      - dbt_expectations.expression_is_true:
          expression: "not (adjustment_type_name is null and adjustment_type_id is not null)"
          config:
            severity: warn
            description: >
              Data Quality Monitor: Definition lookup completeness
              
              Expectation: All type IDs resolve to definitions
              Tolerance: Historical types may be archived
              Action Required: Update definition mappings if needed

      # Business logic validation
      - dbt_expectations.expression_is_true:
          expression: "not (adjustment_category is null and adjustment_type_id is not null)"
          config:
            severity: warn
            description: >
              Business Rule: Category assignment completeness
              
              Requirement: All typed adjustments must be categorized
              Impact: Uncategorized adjustments affect reporting
              Enforcement: Review and update categorization logic

      # Test: Validates adjustment_amount column ranges
      - dbt_expectations.expression_is_true:
          expression: >
            CASE 
              -- For adjustments with procedure context
              WHEN procedure_fee IS NOT NULL THEN
                CASE 
                  WHEN procedure_fee = 0 THEN adjustment_amount = 0
                  WHEN procedure_fee > 0 AND procedure_fee <= 1000 THEN adjustment_amount BETWEEN -10000 AND 10000
                  WHEN procedure_fee > 1000 THEN adjustment_amount BETWEEN -20000 AND 20000
                  ELSE FALSE
                END
              -- For adjustments without procedure context
              ELSE
                CASE 
                  -- Reallocations and small discounts
                  WHEN adjustment_type_name IN ('Reallocation', '5% Senior Discount', '5% Cash Discount', '$25 Referral Credit') 
                    THEN adjustment_amount BETWEEN -1000 AND 1000
                  -- Provider discounts and write-offs (monitor large amounts)
                  WHEN adjustment_type_name IN ('Discount Per Dr. Kamp', 'Discount Per Dr. Schneiss', 'Discount / Write off', 'Professional Discount')
                    THEN adjustment_amount BETWEEN -20000 AND 20000
                  -- Employee and family discounts
                  WHEN adjustment_type_name IN ('MDC Employee', 'MDC EDP', 'Doctors Family', 'MDC SPOUSE/CHILDREN/SIG OTHER')
                    THEN adjustment_amount BETWEEN -5000 AND 5000
                  -- Patient refunds
                  WHEN adjustment_type_name = 'Patient Refund Check'
                    THEN adjustment_amount BETWEEN 0 AND 2000
                  -- Other adjustments
                  ELSE adjustment_amount BETWEEN -5000 AND 5000
                END
            END
          severity: error

      # Test: Validates procedure_fee column ranges
      - dbt_expectations.expression_is_true:
          expression: >
            CASE 
              WHEN procedure_code IN ('D6114', 'D6115') THEN procedure_fee >= 0 AND procedure_fee <= 30000
              ELSE procedure_fee >= 0 AND procedure_fee <= 10000
            END
          config:
            severity: error
            description: >
              Financial Integrity: Procedure fee validation
              
              Accounting Requirement: Fee ranges based on procedure type
              Audit Significance: Prevents data entry errors
              Business Impact: Ensures accurate revenue calculations
    
    meta:
      owner: "dental_finance_team"
      contains_pii: true
      business_process: "Fee Adjustment Processing"
      refresh_frequency: "daily"
      business_impact: "High"
      data_quality_requirements:
        - "All adjustments must have valid business categorization"
        - "Adjustment amounts must be within acceptable ranges"
        - "Financial calculations must maintain accounting integrity"
        - "Audit trail must be complete for all adjustments"
