version: 2

models: 
  - name: int_adjustments
    description: >
      Enhanced adjustment model that combines staged adjustment data with business logic, 
      procedure information, and definition mappings. Part of System A: Fee Processing & Verification workflow.
      
      Refactoring Changes:
      - Migrated complex business logic from staging layer (stg_opendental__adjustment)
      - Added comprehensive adjustment categorization based on adjustment types
      - Implemented note-based classification flags (military, courtesy, no-charge, etc.)
      - Added amount-based classifications (size categories, large/minor flags)
      - Included discount type detection (employee, family, provider discounts)
      - Added unearned income lookup via paysplit joins
      - Follows snake_case conventions for all CTEs
      - Maintains all metadata fields from staging layer
      
      Data Sources:
      - stg_opendental__adjustment: Base adjustment records (cleaned, standardized)
      - stg_opendental__definition: Adjustment type definitions and categories
      - stg_opendental__paysplit: For unearned income type detection
      - int_procedure_complete: Procedure details and standard fees
      
      Business Logic Features:
      - Enhanced adjustment categorization (13 specific categories + other)
      - Note-based flags (no_charge, military_discount, courtesy_adjustment, provider_discretion)
      - Amount-based classification (large, medium, small, minimal)
      - Discount type flags (employee, family, provider discounts)
      - Financial analysis flags (large_adjustment, minor_adjustment, unearned_income)
      - Unearned income detection via paysplit lookup (types 288, 439)
      - Adjustment impact assessment (major, moderate, minor)
      - Adjusted fee calculations and validation

      Note: As an out-of-network focused clinic:
      - Most adjustments are not insurance-related
      - Fee schedules serve as reference data only
      - Standard fees may differ significantly from actual fees
      - Adjustments often reflect patient-specific arrangements

      Note: Relevant definition categories include:
      - Category 0: Core adjustment types (Adjustment, Discount, Insurance Payment)
      - Category 1: Specific adjustment reasons
      - Category 15: Discount types
      - Category 29: Payment plan types

      Note: Data Quality Findings:
      - Some zero-fee procedures have non-zero adjustments (both large and very small)
      - Some low-fee procedures have disproportionately large adjustments
      - Some adjustments are missing procedure information
      - See stakeholders/adjustment_data_quality_notice.md for detailed findings

      Note: Failing Records Analysis:
      - Zero-fee procedures (procedure_fee = 0) with non-zero adjustments:
        * Common in delivery (D2919), post-op (00040), and denture adjustments (N4102)
        * These violate the zero-fee adjustment rule in adjustment_amount test
      - Large provider discounts on low-fee procedures:
        * Examples: $27,680 discount on $330 extraction (D7210)
        * These exceed the -$10,000 limit for procedures ≤ $1,000
      - Missing procedure context:
        * Records with NULL procedure_id, procedure_fee, or procedure_code
        * Handled by separate rules in adjustment_amount test
      - Reallocations outside expected range:
        * One case of $1,348.40 reallocation without procedure context
        * Exceeds the ±$1,000 limit for reallocations
      - Employee/family discounts exceeding limits:
        * Example: $10,246 MDC EDP discount on $736 procedure
        * Exceeds the ±$5,000 limit for employee/family discounts
    
    columns:
      - name: adjustment_id
        description: Primary key from adjustment table
        tests:
          - unique
          - not_null
          - relationships:
              to: ref('stg_opendental__adjustment')
              field: adjustment_id

      - name: patient_id
        description: Foreign key to patient
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: procedure_id
        description: >
          Foreign key to procedure.
          
          Note: Some adjustments may reference historical or archived procedures that are no longer in the system.
          These records are flagged with a warning rather than an error to allow for historical data analysis.
        tests:
          - relationships:
              to: ref('int_procedure_complete')
              field: procedure_id
              config:
                severity: warn

      - name: provider_id
        description: Provider who authorized the adjustment
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id

      - name: clinic_id
        description: Clinic where adjustment was made
        tests: [] # MDC clinic only. No need to test.

      - name: adjustment_amount
        description: >
          Amount of the adjustment (can be positive or negative).
          
          # Test: Model-level expression_is_true validates these constraints:
          # - Zero-fee procedures must have zero adjustment
          # - Procedures ≤ 1,000: adjustment between -10,000 and 10,000
          # - Procedures > 1,000: adjustment between -20,000 and 20,000
        tests: []

      - name: adjustment_date
        description: Date when adjustment was applied
        tests:
          - not_null

      - name: procedure_date
        description: Date of the associated procedure
        tests:
          - not_null

      - name: adjustment_category
        description: >
          High-level categorization of the adjustment based on AdjType.
          Values include: insurance_writeoff, provider_discount, senior_discount, reallocation,
          employee_discount, cash_discount, patient_refund, referral_credit, new_patient_discount,
          admin_correction, admin_adjustment, unearned_income, and other.
          This is the primary categorization used for reporting and analysis.
        tests:
          - not_null

      - name: adjustment_size
        description: Size classification of the adjustment
        tests:
          - not_null

      - name: adjustment_type_name
        description: >
          Human-readable name of the adjustment type from the definitions table.
          This is the raw name from OpenDental's definition table and may contain
          provider-specific or system-specific terminology.
          Example: 'Discount Per Dr. Kamp', '5% Senior Discount', 'Patient Refund Check'
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name
              config:
                severity: warn

      - name: adjustment_type_value
        description: >
          Value associated with the adjustment type from the definitions table.
          This is the raw value field from OpenDental's definition table and may contain
          additional context or instructions for the adjustment type.
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_value
              config:
                severity: warn

      - name: adjustment_category_type
        description: >
          Numeric category ID from the definitions table indicating the type of adjustment.
          This maps to OpenDental's category system:
          - Category 0: Core adjustment types (Adjustment, Discount, Insurance Payment)
          - Category 1: Specific adjustment reasons
          - Category 15: Discount types
          - Category 29: Payment plan types
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: category_id
              config:
                severity: warn

      - name: procedure_code
        description: ADA procedure code from linked procedure
        tests: []

      - name: procedure_description
        description: Description of the linked procedure

      - name: procedure_fee
        description: >
          Original fee amount before adjustment.
          
          # Test: Model-level expression_is_true validates these ranges:
          # - For implant procedures (D6114, D6115): 0 to 30,000
          # - For all other procedures: 0 to 10,000
        tests: []

      - name: fee_schedule_id
        description: ID of the fee schedule used

      - name: standard_fee
        description: Standard fee amount from fee schedule
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              severity: warn

      - name: adjusted_fee
        description: >
          Final fee amount after adjustment (procedure_fee + adjustment_amount).
          
          # Test: Model-level expression_is_true ensures non-negative values
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              severity: warn

      - name: adjustment_impact
        description: Classification of adjustment impact based on percentage of procedure fee
        tests:
          - accepted_values:
              values: ['major', 'moderate', 'minor']

      - name: is_procedure_adjustment
        description: Flag indicating if adjustment is tied to a specific procedure
        tests:
          - not_null

      - name: is_retroactive_adjustment
        description: Flag indicating if adjustment was applied after the procedure date
        tests:
          - not_null

      - name: is_provider_discretion
        description: Flag indicating if adjustment was at provider's discretion
        tests:
          - not_null

      - name: is_employee_discount
        description: Flag indicating if adjustment is an employee discount
        tests:
          - not_null

      - name: is_military_discount
        description: Flag indicating if adjustment is a military discount
        tests:
          - not_null

      - name: is_courtesy_adjustment
        description: Flag indicating if adjustment is a courtesy adjustment
        tests:
          - not_null

      # Additional business logic fields migrated from staging
      - name: adjustment_note
        description: Freetext note describing the adjustment (from staging layer)

      - name: entry_date
        description: Date when the adjustment was entered into the system (from staging layer)

      - name: statement_id
        description: Foreign key to billing statement (from staging layer)

      - name: tax_transaction_id
        description: Foreign key to tax transaction (from staging layer)

      - name: adjustment_direction
        description: >
          Basic categorization of adjustment amount direction.
          Values: 'positive', 'negative', 'zero' (from staging layer)
        tests:
          - accepted_values:
              values: ['positive', 'negative', 'zero']

      - name: is_no_charge
        description: >
          Flag indicating if adjustment note contains no-charge indicators.
          Detected via patterns: 'n/c', 'nc ', 'no charge'
        tests:
          - not_null

      - name: is_family_discount
        description: >
          Flag indicating if adjustment is a family member discount.
          Based on adjustment types: 482, 486
        tests:
          - not_null

      - name: is_large_adjustment
        description: >
          Flag for financially significant adjustments.
          true = adjustment types 486, 474 with amount < -1000
        tests:
          - not_null

      - name: is_minor_adjustment
        description: >
          Flag for small adjustments.
          true = adjustment types 186, 9 with amount > -50
        tests:
          - not_null

      - name: is_unearned_income
        description: >
          Flag indicating if adjustment is related to unearned income.
          Based on adjustment types: 288, 439
        tests:
          - not_null

      - name: unearned_type_id
        description: >
          Specific unearned income type ID from paysplit lookup.
          Values: 288, 439, or NULL if not unearned income

      # Metadata fields (from staging layer)
      - name: _loaded_at
        description: Timestamp when the data was loaded into the data warehouse by the ETL pipeline
        tests:
          - not_null
      
      - name: _created_at
        description: Timestamp when the record was created in OpenDental (source system)
        tests:
          - not_null
      
      - name: _updated_at
        description: Timestamp when the record was last updated in OpenDental (source system)
        tests:
          - not_null

      - name: _created_by_user_id
        description: User ID who created the record in OpenDental (source system)

    tests:
      # Test: Validates overall table size
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 1000
          max_value: 50000

      # Test: Validates adjusted_fee column
      - dbt_expectations.expression_is_true:
          expression: "adjusted_fee >= 0"
          severity: error

      # Test: Validates adjustment_date and procedure_date columns
      - dbt_expectations.expression_is_true:
          expression: "adjustment_date >= procedure_date"
          severity: warn

      # Test: Validates adjustment_amount column
      - dbt_expectations.expression_is_true:
          expression: "abs(adjustment_amount) <= procedure_fee * 2"
          severity: warn

      # Test: Validates adjustment_type_name column
      - dbt_expectations.expression_is_true:
          expression: "not (adjustment_type_name is null and adjustment_type_id is not null)"
          severity: warn

      # Test: Validates adjustment_category column
      - dbt_expectations.expression_is_true:
          expression: "not (adjustment_category is null and adjustment_type_id is not null)"
          severity: warn

      # Test: Validates adjustment_amount column ranges
      - dbt_expectations.expression_is_true:
          expression: >
            CASE 
              -- For adjustments with procedure context
              WHEN procedure_fee IS NOT NULL THEN
                CASE 
                  WHEN procedure_fee = 0 THEN adjustment_amount = 0
                  WHEN procedure_fee > 0 AND procedure_fee <= 1000 THEN adjustment_amount BETWEEN -10000 AND 10000
                  WHEN procedure_fee > 1000 THEN adjustment_amount BETWEEN -20000 AND 20000
                  ELSE FALSE
                END
              -- For adjustments without procedure context
              ELSE
                CASE 
                  -- Reallocations and small discounts
                  WHEN adjustment_type_name IN ('Reallocation', '5% Senior Discount', '5% Cash Discount', '$25 Referral Credit') 
                    THEN adjustment_amount BETWEEN -1000 AND 1000
                  -- Provider discounts and write-offs (monitor large amounts)
                  WHEN adjustment_type_name IN ('Discount Per Dr. Kamp', 'Discount Per Dr. Schneiss', 'Discount / Write off', 'Professional Discount')
                    THEN adjustment_amount BETWEEN -20000 AND 20000
                  -- Employee and family discounts
                  WHEN adjustment_type_name IN ('MDC Employee', 'MDC EDP', 'Doctors Family', 'MDC SPOUSE/CHILDREN/SIG OTHER')
                    THEN adjustment_amount BETWEEN -5000 AND 5000
                  -- Patient refunds
                  WHEN adjustment_type_name = 'Patient Refund Check'
                    THEN adjustment_amount BETWEEN 0 AND 2000
                  -- Other adjustments
                  ELSE adjustment_amount BETWEEN -5000 AND 5000
                END
            END
          severity: error

      # Test: Validates procedure_fee column ranges
      - dbt_expectations.expression_is_true:
          expression: >
            CASE 
              WHEN procedure_code IN ('D6114', 'D6115') THEN procedure_fee >= 0 AND procedure_fee <= 30000
              ELSE procedure_fee >= 0 AND procedure_fee <= 10000
            END
          severity: error
