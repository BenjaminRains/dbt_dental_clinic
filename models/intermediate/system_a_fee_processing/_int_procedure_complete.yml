version: 2

models:
  - name: int_procedure_complete
    description: >
      Comprehensive procedure model that combines clinical procedure data with fee schedules
      and validation flags. Part of System A: Fee Processing & Verification workflow.
      
      Data Sources:
      - stg_opendental__procedurelog: Base procedure records, statuses, and fees
      - stg_opendental__procedurecode: Procedure code definitions and descriptions
      - stg_opendental__fee: Standard fee amounts and schedules
      - stg_opendental__feesched: Fee schedule definitions and types
      - stg_opendental__definition: Status descriptions, treatment areas, and fee types
      - stg_opendental__procedurenote: Clinical notes and documentation
      
      Key metrics:
      - Approximately 88,000 procedures from staging
      - Fee validation statuses track discrepancies between standard and applied fees
      - Includes procedure notes and signature tracking
      - Supports fee verification workflow
      - Includes fee statistics (min, max, avg) per procedure code
      - Uses definition tables for standardized descriptions of statuses, treatment areas, and fee types
      
      Note: As an out-of-network focused clinic:
      - 99.99% of patients use the default fee schedule (0)
      - Fee schedules primarily serve as reference data
      - Insurance-related fee schedules exist but have minimal usage
      - Fee validation should account for this out-of-network reality
    
    config:
      materialized: incremental
      unique_key: procedure_id
    
    columns:
      - name: procedure_id
        description: Primary key from procedurelog
        tests:
          - unique
          - not_null
          - relationships:
              to: ref('stg_opendental__procedurelog')
              field: procedure_id

      - name: patient_id
        description: Foreign key to patient
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__patient')
              field: patient_id

      - name: provider_id
        description: Provider who performed the procedure
        tests:
          - relationships:
              to: ref('stg_opendental__provider')
              field: provider_id

      - name: clinic_id
        description: Clinic where procedure was performed
        tests:
          - not_null

      - name: procedure_code_id
        description: Foreign key to procedure code
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__procedurecode')
              field: procedure_code_id

      - name: procedure_date
        description: Date when procedure was performed or planned
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: "'2023-01-01'"
              max_value: "'2030-12-31'"  # Static future date that's far enough ahead
              row_condition: "procedure_date >= '2023-01-01'"  # Only test records from 2023 onwards
        notes: >
          The model filters for procedures from 2023 onwards, but older procedures may still exist in the source data.
          The test only validates dates for records that should be included in the model.
          The max date is set to 2030 to accommodate future procedures while maintaining test stability.

      - name: procedure_status
        description: Raw status code from source system
        tests:
          - not_null

      - name: procedure_status_desc
        description: Human-readable procedure status from definitions table
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name
              config:
                severity: warn

      - name: procedure_fee
        description: Fee amount from procedurelog
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              row_condition: "procedure_status = 2"  # Only test completed procedures
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1000
              row_condition: "is_hygiene_flag = 1"
              config:
                severity: warn
                name: warn_high_hygiene_fees

      - name: tooth_number
        description: Tooth number for the procedure (dental notation)

      - name: surface
        description: Tooth surface(s) involved in the procedure

      - name: old_code
        description: Legacy or alternative procedure code from the source system
        tests:
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[A-Z0-9]+$'
              severity: warn
              name: warn_invalid_old_code_format

      - name: procedure_code
        description: ADA procedure code from procedure codes table
        tests: []

      - name: procedure_description
        description: Detailed description of the procedure
        tests:
          - warn_procedures_missing_descriptions:
              severity: warn

      - name: abbreviated_description
        description: Short description of the procedure

      - name: is_hygiene_flag
        description: Flag indicating if this is a hygiene procedure
        tests:
          - accepted_values:
              values: [0, 1]

      - name: treatment_area
        description: Area of treatment

      - name: is_prosthetic_flag
        description: Flag indicating if this is a prosthetic procedure
        tests:
          - accepted_values:
              values: [0, 1]

      - name: is_multi_visit_flag
        description: Flag indicating if procedure requires multiple visits
        tests:
          - accepted_values:
              values: [0, 1]

      - name: standard_fee_id
        description: ID of the standard fee record used
        tests:
          - relationships:
              to: ref('stg_opendental__fee')
              field: fee_id
              severity: warn  # Some procedures might not have standard fees

      - name: fee_schedule_id
        description: ID of the fee schedule used
        tests:
          - relationships:
              to: ref('stg_opendental__feesched')
              field: fee_schedule_id
              severity: warn  # Some procedures might not have fee schedules

      - name: standard_fee
        description: Standard fee amount from fee schedule
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000
              row_condition: "has_standard_fee = true"
              severity: warn  # Downgraded to warn since fees may vary for out-of-network

      - name: fee_schedule_description
        description: Name/description of the fee schedule

      - name: fee_schedule_type_id
        description: Type identifier for the fee schedule

      - name: is_hidden
        description: Flag indicating if the fee schedule is hidden

      - name: available_fee_options
        description: Count of different fee options available for this procedure code
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100

      - name: min_available_fee
        description: Minimum fee amount available for this procedure code
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000

      - name: max_available_fee
        description: Maximum fee amount available for this procedure code
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000

      - name: avg_fee_amount
        description: Average fee amount for this procedure code
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000

      - name: has_standard_fee
        description: Flag indicating if a standard fee was found for this procedure
        tests:
          - accepted_values:
              values: [true, false]

      - name: fee_matches_standard
        description: Flag indicating if the procedure fee matches the standard fee
        tests:
          - accepted_values:
              values: [true, false]
          - completed_procs_fee_matches:
              procedure_status: procedure_status
              procedure_fee: procedure_fee
              standard_fee: standard_fee
              config:
                severity: warn
                name: warn_completed_procedure_fee_mismatch

      - name: procedure_notes
        description: Aggregated clinical notes associated with the procedure

      - name: note_count
        description: Number of notes attached to this procedure
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100

      - name: last_note_timestamp
        description: Timestamp of the most recent note

      - name: date_timestamp
        description: Last update timestamp from the source system

      - name: _airbyte_loaded_at
        description: Timestamp when record was loaded by Airbyte

      - name: _loaded_at
        description: Timestamp when record was processed by the int model
        tests:
          - not_null

      - name: treatment_area_desc
        description: Human-readable description of the treatment area from definitions table
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name
              config:
                severity: warn

      - name: fee_schedule_type_desc
        description: Human-readable description of the fee schedule type from definitions table
        tests:
          - relationships:
              to: ref('stg_opendental__definition')
              field: item_name
              config:
                severity: warn

    tests:
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 80000
          max_value: 100000  # Adjusted based on expected volume

      # Custom composite tests
      - dbt_utils.expression_is_true:
          expression: "not (procedure_status = 2 and procedure_fee = 0)"
          severity: warn
          name: warn_completed_procedure_zero_fee

      - dbt_utils.expression_is_true:
          expression: "not (has_standard_fee = false and procedure_status = 2)"
          severity: warn
          name: warn_completed_procedure_no_standard_fee

      - dbt_utils.expression_is_true:
          expression: "procedure_date >= '2023-01-01' or procedure_status = 1"  # 1 = Treatment Plan
          name: historical_procedures_must_be_recent_or_planned

      # Updated test for completed procedures must have at least one code
      - dbt_utils.expression_is_true:
          expression: "not (procedure_status = 2 and procedure_code is null and old_code is null)"
          severity: error
          name: completed_procedures_must_have_codes

      # New warning test for procedures using only old codes
      - dbt_utils.expression_is_true:
          expression: "not (procedure_status = 2 and procedure_code is null and old_code is not null)"
          severity: warn
          name: warn_completed_procedures_using_old_code_only

      - dbt_utils.expression_is_true:
          expression: "abs(procedure_fee - standard_fee) <= 100 or not has_standard_fee"
          severity: warn
          name: warn_large_fee_differences

      - dbt_utils.expression_is_true:
          expression: "not (procedure_status = 2 and fee_matches_standard = false and abs(procedure_fee - standard_fee) > 300)"
          severity: warn
          name: warn_extreme_fee_mismatches

      - dbt_utils.expression_is_true:
          expression: "not (is_hygiene_flag = 1 and procedure_fee > 500)"
          severity: warn
          name: warn_high_hygiene_procedure_fees

      - dbt_utils.expression_is_true:
          expression: >
            (procedure_status_desc = 'Complete' and has_standard_fee = true) or
            (procedure_status_desc = 'Treatment Plan' and has_standard_fee = true) or
            (procedure_status_desc not in ('Complete', 'Treatment Plan'))
          severity: warn
          name: warn_key_procedures_missing_standard_fees

      - dbt_utils.expression_is_true:
          expression: "not (procedure_status = 2 and procedure_notes is null)"
          severity: warn
          name: warn_completed_procedures_without_notes

      - dbt_utils.expression_is_true:
          expression: "not (procedure_status_desc is null and procedure_status is not null)"
          severity: warn
          name: warn_missing_procedure_status_description

      - dbt_utils.expression_is_true:
          expression: "not (treatment_area_desc is null and treatment_area is not null)"
          severity: warn
          name: warn_missing_treatment_area_description

      - dbt_utils.expression_is_true:
          expression: "not (fee_schedule_type_desc is null and fee_schedule_type_id is not null)"
          severity: warn
          name: warn_missing_fee_schedule_type_description