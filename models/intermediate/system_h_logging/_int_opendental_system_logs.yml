version: 2

models:
  - name: int_opendental_system_logs
    description: >
      Intermediate model for system entry logs. Contains audit trail information about 
      user actions and system events, tracking who performed what action and when.
      
      Log Source Values:
      - 0: Main system log (98.15% of records)
      - 7: Specific module (1.48% of records)
      - 16: Rare events (0.02% of records)
      - 19: Another specific module (0.35% of records)
      
      Note: All records have foreign_key_type = 0, indicating they are system entries.
      The differentiation between different types of entries is handled by log_source.
      
      Key features:
      - Tracks all system activities with detailed user attribution
      - Maintains one-to-one relationship with entry logs
      - Records user actions and system events
      - Provides comprehensive audit trail for compliance
      - Integrates with user management system
      - Records user group membership for access control
      - Tracks system-generated vs user-initiated actions
      
      Data Sources:
      - stg_opendental__entrylog: Base system logging data
      - stg_opendental__userod: User information and permissions
      - stg_opendental__usergroup: User group definitions
      
      Business rules:
      - One record per system activity (entry_log_id)
      - System-generated entries (user_id = 0) have null user_name
      - All timestamps must be after 2020-01-01
      - User group information required for non-system entries
      - Entry timestamps must not be in the future
      - Foreign key references must be valid for their respective types
      
      Key metrics:
      - System activity volume by type
      - User action frequency
      - System-generated vs user-initiated actions
      - Activity patterns by user group
      - Activity timing patterns
      
      Grain: One record per system activity (entry_log_id)
      
      Primary key: entry_log_id
      
      Foreign keys:
      - user_id -> stg_opendental__userod.user_id
      - user_group_id -> stg_opendental__usergroup.usergroup_id
      - foreign_key -> Various tables based on log_source
      
      Dependencies:
      - stg_opendental__entrylog
      - stg_opendental__userod
      - stg_opendental__usergroup
      
      Data quality requirements:
      - All required fields must be non-null
      - Timestamps must be valid and not in the future
      - User references must be valid
      - Foreign key references must be valid
      - System entries must be properly identified
      - User group assignments must be valid
    columns:
      - name: entry_log_id
        description: "Primary key - Unique identifier for each log entry"
        tests:
          - unique
          - not_null
      
      - name: user_id
        description: >
          Foreign key to stg_opendental__userod, represents the user who performed the action.
          
          Special cases:
          - user_id = 0: System-generated entries (no specific user)
          - Excluded inactive users: 20, 36, 43, 45, 51, 54, 9280, 9281
            * Jennifer Berg (20) - Active provider, no entrylog entries
            * Becky Solomey (36) - Hidden provider
            * LocalMed (43) - Hidden provider
            * Maria Barajas (45) - Hidden provider
            * Edward Karateew (51) - Hidden provider
            * System/unknown users (54, 9280, 9281)
        tests:
          - relationships:
              to: ref('stg_opendental__userod')
              field: user_id
              where: "user_id NOT IN (0, 20, 36, 43, 45, 51, 54, 9280, 9281)"
              severity: warn
              config:
                description: >
                  Warning expected for user_id = 0 (system-generated entries) 
                  and excluded inactive/system users.
      
      - name: foreign_key_type
        description: >
          Type identifier for the foreign key reference. Currently all records have 
          foreign_key_type = 0, indicating they are system entries.
        tests:
          - not_null
          - accepted_values:
              values: [0]
              quote: false
      
      - name: foreign_key
        description: >
          Foreign key reference to the related record. The actual table referenced 
          depends on the log_source value.
        tests:
          - not_null
      
      - name: log_source
        description: >
          Source of the log entry. Indicates which system component or module 
          generated the log entry.
          
          Values:
          - 0: Main system log (98.15% of records)
          - 7: Specific module (1.48% of records)
          - 16: Rare events (0.02% of records)
          - 19: Another specific module (0.35% of records)
        tests:
          - not_null
          - accepted_values:
              values: [0, 7, 16, 19]
              quote: false
      
      - name: entry_datetime
        description: "Timestamp when the log entry was created"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= '2020-01-01'"
          - dbt_utils.expression_is_true:
              expression: "<= current_timestamp"
      
      - name: username
        description: "Username of the user who performed the action"
        tests:
          - not_null:
              where: "user_id != 0"
      
      - name: user_group_id
        description: >
          Foreign key to stg_opendental__usergroup, represents the user's security group.
          user_group_id = 0 represents system or unassigned entries.
        tests:
          - not_null
          - relationships:
              to: ref('stg_opendental__usergroup')
              field: usergroup_id
              where: "user_group_id != 0"
              severity: warn
              config:
                description: >
                  Warning expected for user_group_id = 0 (system or unassigned entries).

    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - entry_log_id
            - entry_datetime
          config:
            severity: error
            description: "Each entry log must have a unique combination of ID and timestamp"
      
      - dbt_utils.expression_is_true:
          expression: "entry_datetime <= current_timestamp"
          name: entry_datetime_not_in_future
          config:
            severity: error
            description: "Entry timestamps must not be in the future"
      
      - dbt_utils.expression_is_true:
          expression: "user_id != 0 OR (user_id = 0 AND username IS NULL)"
          name: system_entries_have_null_user_name
          config:
            severity: error
            description: "System-generated entries must have null username"
      
      - dbt_utils.expression_is_true:
          expression: "entry_datetime >= '2020-01-01'"
          name: logs_after_2020
          config:
            severity: error
            description: "All logs must be from 2020 or later"

    meta:
      business_owners: ["system_administrators", "compliance_team"]
      technical_owners: ["data_engineering_team"]
      refresh_frequency: "real-time"
      contains_pii: true
      data_quality_requirements:
        - "All system activities must be logged"
        - "User attribution must be accurate"
        - "Timestamps must be valid and chronological"
        - "Foreign key references must be valid"
        - "System entries must be properly identified"
        - "User group assignments must be valid"
        - "Log sources must be valid system components"
        - "All required fields must be non-null"
        - "Entry logs must have unique ID-timestamp combinations"
        - "All logs must be from 2020 or later" 